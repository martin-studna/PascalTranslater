@output(stack.hh@)@
// A Bison parser, made by GNU Bison 3.0.4.

// Stack handling for Bison parsers in C++

// Copyright (C) 2002-2013 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.

/**
 ** \file stack.hh
 ** Define the yy::stack class.
 */

#ifndef YY_YY_STACK_HH_INCLUDED
# define YY_YY_STACK_HH_INCLUDED

# include <vector>


namespace yy {
#line @oline@ @ofile@ // stack.hh:133
  template <class T, class S = std::vector<T> >
  class stack
  {
  public:
    // Hide our reversed order.
    typedef typename S::reverse_iterator iterator;
    typedef typename S::const_reverse_iterator const_iterator;

    stack ()
      : seq_ ()
    {
    }

    stack (unsigned int n)
      : seq_ (n)
    {
    }

    inline
    T&
    operator[] (unsigned int i)
    {
      return seq_[seq_.size () - 1 - i];
    }

    inline
    const T&
    operator[] (unsigned int i) const
    {
      return seq_[seq_.size () - 1 - i];
    }

    /// Steal the contents of \a t.
    ///
    /// Close to move-semantics.
    inline
    void
    push (T& t)
    {
      seq_.push_back (T());
      operator[](0).move (t);
    }

    inline
    void
    pop (unsigned int n = 1)
    {
      for (; n; --n)
        seq_.pop_back ();
    }

    void
    clear ()
    {
      seq_.clear ();
    }

    inline
    typename S::size_type
    size () const
    {
      return seq_.size ();
    }

    inline
    const_iterator
    begin () const
    {
      return seq_.rbegin ();
    }

    inline
    const_iterator
    end () const
    {
      return seq_.rend ();
    }

  private:
    stack (const stack&);
    stack& operator= (const stack&);
    /// The wrapped container.
    S seq_;
  };

  /// Present a slice of the top of a stack.
  template <class T, class S = stack<T> >
  class slice
  {
  public:
    slice (const S& stack, unsigned int range)
      : stack_ (stack)
      , range_ (range)
    {
    }

    inline
    const T&
    operator [] (unsigned int i) const
    {
      return stack_[range_ - i];
    }

  private:
    const S& stack_;
    unsigned int range_;
  };


} // yy
#line @oline@ @ofile@ // stack.hh:133

#endif // !YY_YY_STACK_HH_INCLUDED
@output(du3456g.hpp@)@
// A Bison parser, made by GNU Bison 3.0.4.

// Skeleton interface for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2013 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.

/**
 ** \file du3456g.hpp
 ** Define the yy::parser class.
 */

// C++ LALR(1) parser skeleton written by Akim Demaille.

#ifndef YY_YY_DU3456G_HPP_INCLUDED
# define YY_YY_DU3456G_HPP_INCLUDED
// //                    "%code requires" blocks.
#line 15 "C:\\Users\\Martin\\source\\repos\\PascalTranslater\\mlaskal\\private-src\\du3456g.y" // lalr1.cc:371

	// this code is emitted to du3456g.hpp

	// allow references to semantic types in %type
#include "dutables.hpp"

	// avoid no-case warnings when compiling du3g.hpp
#pragma warning (disable:4065)

// adjust YYLLOC_DEFAULT macro for our api.location.type
#define YYLLOC_DEFAULT(res,rhs,N)	(res = (N)?YYRHSLOC(rhs, 1):YYRHSLOC(rhs, 0))
// supply missing YY_NULL in bfexpg.hpp
#define YY_NULL	0
#define YY_NULLPTR	0

#line @oline@ @ofile@ // lalr1.cc:371

# include <cassert>
# include <vector>
# include <iostream>
# include <stdexcept>
# include <string>
# include "stack.hh"

#include <typeinfo>
#ifndef YYASSERT
# include <cassert>
# define YYASSERT assert
#endif


/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif


namespace yy {
#line @oline@ @ofile@ // lalr1.cc:371



  /// A char[S] buffer to store and retrieve objects.
  ///
  /// Sort of a variant, but does not keep track of the nature
  /// of the stored data, since that knowledge is available
  /// via the current state.
  template <size_t S>
  struct variant
  {
    /// Type of *this.
    typedef variant<S> self_type;

    /// Empty construction.
    variant ()
      : yytname_ (YY_NULL)
    {}

    /// Construct and fill.
    template <typename T>
    variant (const T& t)
      : yytname_ (typeid (T).name ())
    {
      YYASSERT (sizeof (T) <= S);
      new (yyas_<T> ()) T (t);
    }

    /// Destruction, allowed only if empty.
    ~variant ()
    {
      YYASSERT (!yytname_);
    }

    /// Instantiate an empty \a T in here.
    template <typename T>
    T&
    build ()
    {
      YYASSERT (!yytname_);
      YYASSERT (sizeof (T) <= S);
      yytname_ = typeid (T).name ();
      return *new (yyas_<T> ()) T;
    }

    /// Instantiate a \a T in here from \a t.
    template <typename T>
    T&
    build (const T& t)
    {
      YYASSERT (!yytname_);
      YYASSERT (sizeof (T) <= S);
      yytname_ = typeid (T).name ();
      return *new (yyas_<T> ()) T (t);
    }

    /// Accessor to a built \a T.
    template <typename T>
    T&
    as ()
    {
      YYASSERT (yytname_ == typeid (T).name ());
      YYASSERT (sizeof (T) <= S);
      return *yyas_<T> ();
    }

    /// Const accessor to a built \a T (for %printer).
    template <typename T>
    const T&
    as () const
    {
      YYASSERT (yytname_ == typeid (T).name ());
      YYASSERT (sizeof (T) <= S);
      return *yyas_<T> ();
    }

    /// Swap the content with \a other, of same type.
    ///
    /// Both variants must be built beforehand, because swapping the actual
    /// data requires reading it (with as()), and this is not possible on
    /// unconstructed variants: it would require some dynamic testing, which
    /// should not be the variant's responsability.
    /// Swapping between built and (possibly) non-built is done with
    /// variant::move ().
    template <typename T>
    void
    swap (self_type& other)
    {
      YYASSERT (yytname_);
      YYASSERT (yytname_ == other.yytname_);
      std::swap (as<T> (), other.as<T> ());
    }

    /// Move the content of \a other to this.
    ///
    /// Destroys \a other.
    template <typename T>
    void
    move (self_type& other)
    {
      YYASSERT (!yytname_);
      build<T> ();
      swap<T> (other);
      other.destroy<T> ();
    }

    /// Copy the content of \a other to this.
    template <typename T>
    void
    copy (const self_type& other)
    {
      build<T> (other.as<T> ());
    }

    /// Destroy the stored \a T.
    template <typename T>
    void
    destroy ()
    {
      as<T> ().~T ();
      yytname_ = YY_NULL;
    }

  private:
    /// Prohibit blind copies.
    self_type& operator=(const self_type&);
    variant (const self_type&);

    /// Accessor to raw memory as \a T.
    template <typename T>
    T*
    yyas_ ()
    {
      void *yyp = yybuffer_.yyraw;
      return static_cast<T*> (yyp);
     }

    /// Const accessor to raw memory as \a T.
    template <typename T>
    const T*
    yyas_ () const
    {
      const void *yyp = yybuffer_.yyraw;
      return static_cast<const T*> (yyp);
     }

    union
    {
      /// Strongest alignment constraints.
      long double yyalign_me;
      /// A buffer large enough to store any of the semantic values.
      char yyraw[S];
    } yybuffer_;

    /// Whether the content is built: if defined, the name of the stored type.
    const char *yytname_;
  };


  /// A Bison parser.
  class  mlaskal_parser 
  {
  public:
#ifndef YYSTYPE
    /// An auxiliary type to compute the largest semantic type.
    union union_type
    {
      // FOR_DIRECTION
      char dummy1@{sizeof(mlc::DUTOKGE_FOR_DIRECTION)@};

      // OPER_MUL
      char dummy2@{sizeof(mlc::DUTOKGE_OPER_MUL)@};

      // OPER_REL
      char dummy3@{sizeof(mlc::DUTOKGE_OPER_REL)@};

      // OPER_SIGNADD
      char dummy4@{sizeof(mlc::DUTOKGE_OPER_SIGNADD)@};

      // IDENTIFIER
      char dummy5@{sizeof(mlc::ls_id_index)@};

      // UINT
      char dummy6@{sizeof(mlc::ls_int_index)@};

      // REAL
      char dummy7@{sizeof(mlc::ls_real_index)@};

      // STRING
      char dummy8@{sizeof(mlc::ls_str_index)@};
};

    /// Symbol semantic values.
    typedef variant<sizeof(union_type)> semantic_type;
#else
    typedef YYSTYPE semantic_type;
#endif
    /// Symbol locations.
    typedef  unsigned  location_type;

    /// Syntax errors thrown from user actions.
    struct syntax_error : std::runtime_error
    {
      syntax_error (const location_type& l, const std::string& m);
      location_type location;
    };

    /// Tokens.
    struct token
    {
      enum yytokentype
      {
        DUTOK_EOF = 0,
        DUTOK_PROGRAM = 258,
        DUTOK_LABEL = 259,
        DUTOK_CONST = 260,
        DUTOK_TYPE = 261,
        DUTOK_VAR = 262,
        DUTOK_BEGIN = 263,
        DUTOK_END = 264,
        DUTOK_PROCEDURE = 265,
        DUTOK_FUNCTION = 266,
        DUTOK_ARRAY = 267,
        DUTOK_OF = 268,
        DUTOK_GOTO = 269,
        DUTOK_IF = 270,
        DUTOK_THEN = 271,
        DUTOK_ELSE = 272,
        DUTOK_WHILE = 273,
        DUTOK_DO = 274,
        DUTOK_REPEAT = 275,
        DUTOK_UNTIL = 276,
        DUTOK_FOR = 277,
        DUTOK_OR = 278,
        DUTOK_NOT = 279,
        DUTOK_RECORD = 280,
        DUTOK_IDENTIFIER = 281,
        DUTOK_UINT = 282,
        DUTOK_REAL = 283,
        DUTOK_STRING = 284,
        DUTOK_SEMICOLON = 285,
        DUTOK_DOT = 286,
        DUTOK_COMMA = 287,
        DUTOK_EQ = 288,
        DUTOK_COLON = 289,
        DUTOK_LPAR = 290,
        DUTOK_RPAR = 291,
        DUTOK_DOTDOT = 292,
        DUTOK_LSBRA = 293,
        DUTOK_RSBRA = 294,
        DUTOK_ASSIGN = 295,
        DUTOK_OPER_REL = 296,
        DUTOK_OPER_SIGNADD = 297,
        DUTOK_OPER_MUL = 298,
        DUTOK_FOR_DIRECTION = 299
      };
    };

    /// (External) token type, as returned by yylex.
    typedef token::yytokentype token_type;

    /// Internal symbol number.
    typedef int symbol_number_type;

    /// Internal symbol number for tokens (subsumed by symbol_number_type).
    typedef unsigned char token_number_type;

    /// A complete symbol.
    ///
    /// Expects its Base type to provide access to the symbol type
    /// via type_get().
    ///
    /// Provide access to semantic value and location.
    template <typename Base>
    struct basic_symbol : Base
    {
      /// Alias to Base.
      typedef Base super_type;

      /// Default constructor.
      basic_symbol ();

      /// Copy constructor.
      basic_symbol (const basic_symbol& other);

      /// Constructor for valueless symbols, and symbols from each type.

  basic_symbol (typename Base::kind_type t, const location_type& l);

  basic_symbol (typename Base::kind_type t, const mlc::DUTOKGE_FOR_DIRECTION v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const mlc::DUTOKGE_OPER_MUL v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const mlc::DUTOKGE_OPER_REL v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const mlc::DUTOKGE_OPER_SIGNADD v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const mlc::ls_id_index v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const mlc::ls_int_index v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const mlc::ls_real_index v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const mlc::ls_str_index v, const location_type& l);


      /// Constructor for symbols with semantic value.
      basic_symbol (typename Base::kind_type t,
                    const semantic_type& v,
                    const location_type& l);

      ~basic_symbol ();

      /// Destructive move, \a s is emptied into this.
      void move (basic_symbol& s);

      /// The semantic value.
      semantic_type value;

      /// The location.
      location_type location;

    private:
      /// Assignment operator.
      basic_symbol& operator= (const basic_symbol& other);
    };

    /// Type access provider for token (enum) based symbols.
    struct by_type
    {
      /// Default constructor.
      by_type ();

      /// Copy constructor.
      by_type (const by_type& other);

      /// The symbol type as needed by the constructor.
      typedef token_type kind_type;

      /// Constructor from (external) token numbers.
      by_type (kind_type t);

      /// Steal the symbol type from \a that.
      void move (by_type& that);

      /// The (internal) type number (corresponding to \a type).
      /// -1 when this symbol is empty.
      symbol_number_type type_get () const;

      /// The token.
      token_type token () const;

      enum { empty = 0 };

      /// The symbol type.
      /// -1 when this symbol is empty.
      token_number_type type;
    };

    /// "External" symbols: returned by the scanner.
    typedef basic_symbol<by_type> symbol_type;

    // Symbol constructors declarations.
    static inline
    symbol_type
    make_EOF (const location_type& l);

    static inline
    symbol_type
    make_PROGRAM (const location_type& l);

    static inline
    symbol_type
    make_LABEL (const location_type& l);

    static inline
    symbol_type
    make_CONST (const location_type& l);

    static inline
    symbol_type
    make_TYPE (const location_type& l);

    static inline
    symbol_type
    make_VAR (const location_type& l);

    static inline
    symbol_type
    make_BEGIN (const location_type& l);

    static inline
    symbol_type
    make_END (const location_type& l);

    static inline
    symbol_type
    make_PROCEDURE (const location_type& l);

    static inline
    symbol_type
    make_FUNCTION (const location_type& l);

    static inline
    symbol_type
    make_ARRAY (const location_type& l);

    static inline
    symbol_type
    make_OF (const location_type& l);

    static inline
    symbol_type
    make_GOTO (const location_type& l);

    static inline
    symbol_type
    make_IF (const location_type& l);

    static inline
    symbol_type
    make_THEN (const location_type& l);

    static inline
    symbol_type
    make_ELSE (const location_type& l);

    static inline
    symbol_type
    make_WHILE (const location_type& l);

    static inline
    symbol_type
    make_DO (const location_type& l);

    static inline
    symbol_type
    make_REPEAT (const location_type& l);

    static inline
    symbol_type
    make_UNTIL (const location_type& l);

    static inline
    symbol_type
    make_FOR (const location_type& l);

    static inline
    symbol_type
    make_OR (const location_type& l);

    static inline
    symbol_type
    make_NOT (const location_type& l);

    static inline
    symbol_type
    make_RECORD (const location_type& l);

    static inline
    symbol_type
    make_IDENTIFIER (const mlc::ls_id_index& v, const location_type& l);

    static inline
    symbol_type
    make_UINT (const mlc::ls_int_index& v, const location_type& l);

    static inline
    symbol_type
    make_REAL (const mlc::ls_real_index& v, const location_type& l);

    static inline
    symbol_type
    make_STRING (const mlc::ls_str_index& v, const location_type& l);

    static inline
    symbol_type
    make_SEMICOLON (const location_type& l);

    static inline
    symbol_type
    make_DOT (const location_type& l);

    static inline
    symbol_type
    make_COMMA (const location_type& l);

    static inline
    symbol_type
    make_EQ (const location_type& l);

    static inline
    symbol_type
    make_COLON (const location_type& l);

    static inline
    symbol_type
    make_LPAR (const location_type& l);

    static inline
    symbol_type
    make_RPAR (const location_type& l);

    static inline
    symbol_type
    make_DOTDOT (const location_type& l);

    static inline
    symbol_type
    make_LSBRA (const location_type& l);

    static inline
    symbol_type
    make_RSBRA (const location_type& l);

    static inline
    symbol_type
    make_ASSIGN (const location_type& l);

    static inline
    symbol_type
    make_OPER_REL (const mlc::DUTOKGE_OPER_REL& v, const location_type& l);

    static inline
    symbol_type
    make_OPER_SIGNADD (const mlc::DUTOKGE_OPER_SIGNADD& v, const location_type& l);

    static inline
    symbol_type
    make_OPER_MUL (const mlc::DUTOKGE_OPER_MUL& v, const location_type& l);

    static inline
    symbol_type
    make_FOR_DIRECTION (const mlc::DUTOKGE_FOR_DIRECTION& v, const location_type& l);


    /// Build a parser object.
     mlaskal_parser  (mlc::yyscan_t2 yyscanner_yyarg, mlc::MlaskalCtx* ctx_yyarg);
    virtual ~ mlaskal_parser  ();

    /// Parse.
    /// \returns  0 iff parsing succeeded.
    virtual int parse ();

#if YYDEBUG
    /// The current debugging stream.
    std::ostream& debug_stream () const;
    /// Set the current debugging stream.
    void set_debug_stream (std::ostream &);

    /// Type for debugging levels.
    typedef int debug_level_type;
    /// The current debugging level.
    debug_level_type debug_level () const;
    /// Set the current debugging level.
    void set_debug_level (debug_level_type l);
#endif

    /// Report a syntax error.
    /// \param loc    where the syntax error is found.
    /// \param msg    a description of the syntax error.
    virtual void error (const location_type& loc, const std::string& msg);

    /// Report a syntax error.
    void error (const syntax_error& err);

  private:
    /// This class is not copyable.
     mlaskal_parser  (const  mlaskal_parser &);
     mlaskal_parser & operator= (const  mlaskal_parser &);

    /// State numbers.
    typedef int state_type;

    /// Generate an error message.
    /// \param yystate   the state where the error occurred.
    /// \param yytoken   the lookahead token type, or yyempty_.
    virtual std::string yysyntax_error_ (state_type yystate,
                                         symbol_number_type yytoken) const;

    /// Compute post-reduction state.
    /// \param yystate   the current state
    /// \param yylhs     the nonterminal to push on the stack
    state_type yy_lr_goto_state_ (state_type yystate, int yylhs);

    /// Whether the given \c yypact_ value indicates a defaulted state.
    /// \param yyvalue   the value to check
    static bool yy_pact_value_is_default_ (int yyvalue);

    /// Whether the given \c yytable_ value indicates a syntax error.
    /// \param yyvalue   the value to check
    static bool yy_table_value_is_error_ (int yyvalue);

    static const short int yypact_ninf_;
    static const signed char yytable_ninf_;

    /// Convert a scanner token number \a t to a symbol number.
    static token_number_type yytranslate_ (token_type t);

    // Tables.
  // YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
  // STATE-NUM.
  static const short int yypact_[];

  // YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
  // Performed when YYTABLE does not specify something else to do.  Zero
  // means the default is an error.
  static const unsigned char yydefact_[];

  // YYPGOTO[NTERM-NUM].
  static const short int yypgoto_[];

  // YYDEFGOTO[NTERM-NUM].
  static const short int yydefgoto_[];

  // YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
  // positive, shift that token.  If negative, reduce the rule whose
  // number is the opposite.  If YYTABLE_NINF, syntax error.
  static const short int yytable_[];

  static const short int yycheck_[];

  // YYSTOS[STATE-NUM] -- The (internal number of the) accessing
  // symbol of state STATE-NUM.
  static const unsigned char yystos_[];

  // YYR1[YYN] -- Symbol number of symbol that rule YYN derives.
  static const unsigned char yyr1_[];

  // YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.
  static const unsigned char yyr2_[];


    /// Convert the symbol name \a n to a form suitable for a diagnostic.
    static std::string yytnamerr_ (const char *n);


    /// For a symbol, its name in clear.
    static const char* const yytname_[];
#if YYDEBUG
  // YYRLINE[YYN] -- Source line where rule number YYN was defined.
  static const unsigned short int yyrline_[];
    /// Report on the debug stream that the rule \a r is going to be reduced.
    virtual void yy_reduce_print_ (int r);
    /// Print the state stack on the debug stream.
    virtual void yystack_print_ ();

    // Debugging.
    int yydebug_;
    std::ostream* yycdebug_;

    /// \brief Display a symbol type, value and location.
    /// \param yyo    The output stream.
    /// \param yysym  The symbol.
    template <typename Base>
    void yy_print_ (std::ostream& yyo, const basic_symbol<Base>& yysym) const;
#endif

    /// \brief Reclaim the memory associated to a symbol.
    /// \param yymsg     Why this token is reclaimed.
    ///                  If null, print nothing.
    /// \param s         The symbol.
    template <typename Base>
    void yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const;

  private:
    /// Type access provider for state based symbols.
    struct by_state
    {
      /// Default constructor.
      by_state ();

      /// The symbol type as needed by the constructor.
      typedef state_type kind_type;

      /// Constructor.
      by_state (kind_type s);

      /// Copy constructor.
      by_state (const by_state& other);

      /// Steal the symbol type from \a that.
      void move (by_state& that);

      /// The (internal) type number (corresponding to \a state).
      /// "empty" when empty.
      symbol_number_type type_get () const;

      enum { empty = 0 };

      /// The state.
      state_type state;
    };

    /// "Internal" symbol: element of the stack.
    struct stack_symbol_type : basic_symbol<by_state>
    {
      /// Superclass.
      typedef basic_symbol<by_state> super_type;
      /// Construct an empty symbol.
      stack_symbol_type ();
      /// Steal the contents from \a sym to build this.
      stack_symbol_type (state_type s, symbol_type& sym);
      /// Assignment, needed by push_back.
      stack_symbol_type& operator= (const stack_symbol_type& that);
    };

    /// Stack type.
    typedef stack<stack_symbol_type> stack_type;

    /// The stack.
    stack_type yystack_;

    /// Push a new state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the symbol
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, stack_symbol_type& s);

    /// Push a new look ahead token on the state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the state
    /// \param sym  the symbol (for its value and location).
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, state_type s, symbol_type& sym);

    /// Pop \a n symbols the three stacks.
    void yypop_ (unsigned int n = 1);

    // Constants.
    enum
    {
      yyeof_ = 0,
      yylast_ = 347,           //< Last index in yytable_.
      yynnts_ = 44,  //< Number of nonterminal symbols.
      yyempty_ = -2,
      yyfinal_ = 4, //< Termination state number.
      yyterror_ = 1,
      yyerrcode_ = 256,
      yyntokens_ = 45    //< Number of tokens.
    };


    // User arguments.
    mlc::yyscan_t2 yyscanner;
    mlc::MlaskalCtx* ctx;
  };

  // Symbol number corresponding to token number t.
  inline
   mlaskal_parser ::token_number_type
   mlaskal_parser ::yytranslate_ (token_type t)
  {
    static
    const token_number_type
    translate_table[] =
    {
     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44
    };
    const unsigned int user_token_number_max_ = 299;
    const token_number_type undef_token_ = 2;

    if (static_cast<int>(t) <= yyeof_)
      return yyeof_;
    else if (static_cast<unsigned int> (t) <= user_token_number_max_)
      return translate_table[t];
    else
      return undef_token_;
  }

  inline
   mlaskal_parser ::syntax_error::syntax_error (const location_type& l, const std::string& m)
    : std::runtime_error (m)
    , location (l)
  {}

  // basic_symbol.
  template <typename Base>
  inline
   mlaskal_parser ::basic_symbol<Base>::basic_symbol ()
    : value ()
  {}

  template <typename Base>
  inline
   mlaskal_parser ::basic_symbol<Base>::basic_symbol (const basic_symbol& other)
    : Base (other)
    , value ()
    , location (other.location)
  {
      switch (other.type_get ())
    {
      case 44: // FOR_DIRECTION
        value.copy< mlc::DUTOKGE_FOR_DIRECTION > (other.value);
        break;

      case 43: // OPER_MUL
        value.copy< mlc::DUTOKGE_OPER_MUL > (other.value);
        break;

      case 41: // OPER_REL
        value.copy< mlc::DUTOKGE_OPER_REL > (other.value);
        break;

      case 42: // OPER_SIGNADD
        value.copy< mlc::DUTOKGE_OPER_SIGNADD > (other.value);
        break;

      case 26: // IDENTIFIER
        value.copy< mlc::ls_id_index > (other.value);
        break;

      case 27: // UINT
        value.copy< mlc::ls_int_index > (other.value);
        break;

      case 28: // REAL
        value.copy< mlc::ls_real_index > (other.value);
        break;

      case 29: // STRING
        value.copy< mlc::ls_str_index > (other.value);
        break;

      default:
        break;
    }

  }


  template <typename Base>
  inline
   mlaskal_parser ::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const semantic_type& v, const location_type& l)
    : Base (t)
    , value ()
    , location (l)
  {
    (void) v;
      switch (this->type_get ())
    {
      case 44: // FOR_DIRECTION
        value.copy< mlc::DUTOKGE_FOR_DIRECTION > (v);
        break;

      case 43: // OPER_MUL
        value.copy< mlc::DUTOKGE_OPER_MUL > (v);
        break;

      case 41: // OPER_REL
        value.copy< mlc::DUTOKGE_OPER_REL > (v);
        break;

      case 42: // OPER_SIGNADD
        value.copy< mlc::DUTOKGE_OPER_SIGNADD > (v);
        break;

      case 26: // IDENTIFIER
        value.copy< mlc::ls_id_index > (v);
        break;

      case 27: // UINT
        value.copy< mlc::ls_int_index > (v);
        break;

      case 28: // REAL
        value.copy< mlc::ls_real_index > (v);
        break;

      case 29: // STRING
        value.copy< mlc::ls_str_index > (v);
        break;

      default:
        break;
    }
}


  // Implementation of basic_symbol constructor for each type.

  template <typename Base>
   mlaskal_parser ::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const location_type& l)
    : Base (t)
    , value ()
    , location (l)
  {}

  template <typename Base>
   mlaskal_parser ::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const mlc::DUTOKGE_FOR_DIRECTION v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
   mlaskal_parser ::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const mlc::DUTOKGE_OPER_MUL v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
   mlaskal_parser ::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const mlc::DUTOKGE_OPER_REL v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
   mlaskal_parser ::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const mlc::DUTOKGE_OPER_SIGNADD v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
   mlaskal_parser ::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const mlc::ls_id_index v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
   mlaskal_parser ::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const mlc::ls_int_index v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
   mlaskal_parser ::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const mlc::ls_real_index v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
   mlaskal_parser ::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const mlc::ls_str_index v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}


  template <typename Base>
  inline
   mlaskal_parser ::basic_symbol<Base>::~basic_symbol ()
  {
    // User destructor.
    symbol_number_type yytype = this->type_get ();
    switch (yytype)
    {
   default:
      break;
    }

    // Type destructor.
    switch (yytype)
    {
      case 44: // FOR_DIRECTION
        value.template destroy< mlc::DUTOKGE_FOR_DIRECTION > ();
        break;

      case 43: // OPER_MUL
        value.template destroy< mlc::DUTOKGE_OPER_MUL > ();
        break;

      case 41: // OPER_REL
        value.template destroy< mlc::DUTOKGE_OPER_REL > ();
        break;

      case 42: // OPER_SIGNADD
        value.template destroy< mlc::DUTOKGE_OPER_SIGNADD > ();
        break;

      case 26: // IDENTIFIER
        value.template destroy< mlc::ls_id_index > ();
        break;

      case 27: // UINT
        value.template destroy< mlc::ls_int_index > ();
        break;

      case 28: // REAL
        value.template destroy< mlc::ls_real_index > ();
        break;

      case 29: // STRING
        value.template destroy< mlc::ls_str_index > ();
        break;

      default:
        break;
    }

  }

  template <typename Base>
  inline
  void
   mlaskal_parser ::basic_symbol<Base>::move (basic_symbol& s)
  {
    super_type::move(s);
      switch (this->type_get ())
    {
      case 44: // FOR_DIRECTION
        value.move< mlc::DUTOKGE_FOR_DIRECTION > (s.value);
        break;

      case 43: // OPER_MUL
        value.move< mlc::DUTOKGE_OPER_MUL > (s.value);
        break;

      case 41: // OPER_REL
        value.move< mlc::DUTOKGE_OPER_REL > (s.value);
        break;

      case 42: // OPER_SIGNADD
        value.move< mlc::DUTOKGE_OPER_SIGNADD > (s.value);
        break;

      case 26: // IDENTIFIER
        value.move< mlc::ls_id_index > (s.value);
        break;

      case 27: // UINT
        value.move< mlc::ls_int_index > (s.value);
        break;

      case 28: // REAL
        value.move< mlc::ls_real_index > (s.value);
        break;

      case 29: // STRING
        value.move< mlc::ls_str_index > (s.value);
        break;

      default:
        break;
    }

    location = s.location;
  }

  // by_type.
  inline
   mlaskal_parser ::by_type::by_type ()
     : type (empty)
  {}

  inline
   mlaskal_parser ::by_type::by_type (const by_type& other)
    : type (other.type)
  {}

  inline
   mlaskal_parser ::by_type::by_type (token_type t)
    : type (yytranslate_ (t))
  {}

  inline
  void
   mlaskal_parser ::by_type::move (by_type& that)
  {
    type = that.type;
    that.type = empty;
  }

  inline
  int
   mlaskal_parser ::by_type::type_get () const
  {
    return type;
  }

  inline
   mlaskal_parser ::token_type
   mlaskal_parser ::by_type::token () const
  {
    // YYTOKNUM[NUM] -- (External) token number corresponding to the
    // (internal) symbol number NUM (which must be that of a token).  */
    static
    const unsigned short int
    yytoken_number_[] =
    {
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299
    };
    return static_cast<token_type> (yytoken_number_[type]);
  }
  // Implementation of make_symbol for each symbol type.
   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_EOF (const location_type& l)
  {
    return symbol_type (token::DUTOK_EOF, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_PROGRAM (const location_type& l)
  {
    return symbol_type (token::DUTOK_PROGRAM, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_LABEL (const location_type& l)
  {
    return symbol_type (token::DUTOK_LABEL, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_CONST (const location_type& l)
  {
    return symbol_type (token::DUTOK_CONST, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_TYPE (const location_type& l)
  {
    return symbol_type (token::DUTOK_TYPE, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_VAR (const location_type& l)
  {
    return symbol_type (token::DUTOK_VAR, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_BEGIN (const location_type& l)
  {
    return symbol_type (token::DUTOK_BEGIN, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_END (const location_type& l)
  {
    return symbol_type (token::DUTOK_END, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_PROCEDURE (const location_type& l)
  {
    return symbol_type (token::DUTOK_PROCEDURE, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_FUNCTION (const location_type& l)
  {
    return symbol_type (token::DUTOK_FUNCTION, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_ARRAY (const location_type& l)
  {
    return symbol_type (token::DUTOK_ARRAY, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_OF (const location_type& l)
  {
    return symbol_type (token::DUTOK_OF, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_GOTO (const location_type& l)
  {
    return symbol_type (token::DUTOK_GOTO, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_IF (const location_type& l)
  {
    return symbol_type (token::DUTOK_IF, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_THEN (const location_type& l)
  {
    return symbol_type (token::DUTOK_THEN, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_ELSE (const location_type& l)
  {
    return symbol_type (token::DUTOK_ELSE, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_WHILE (const location_type& l)
  {
    return symbol_type (token::DUTOK_WHILE, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_DO (const location_type& l)
  {
    return symbol_type (token::DUTOK_DO, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_REPEAT (const location_type& l)
  {
    return symbol_type (token::DUTOK_REPEAT, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_UNTIL (const location_type& l)
  {
    return symbol_type (token::DUTOK_UNTIL, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_FOR (const location_type& l)
  {
    return symbol_type (token::DUTOK_FOR, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_OR (const location_type& l)
  {
    return symbol_type (token::DUTOK_OR, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_NOT (const location_type& l)
  {
    return symbol_type (token::DUTOK_NOT, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_RECORD (const location_type& l)
  {
    return symbol_type (token::DUTOK_RECORD, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_IDENTIFIER (const mlc::ls_id_index& v, const location_type& l)
  {
    return symbol_type (token::DUTOK_IDENTIFIER, v, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_UINT (const mlc::ls_int_index& v, const location_type& l)
  {
    return symbol_type (token::DUTOK_UINT, v, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_REAL (const mlc::ls_real_index& v, const location_type& l)
  {
    return symbol_type (token::DUTOK_REAL, v, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_STRING (const mlc::ls_str_index& v, const location_type& l)
  {
    return symbol_type (token::DUTOK_STRING, v, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_SEMICOLON (const location_type& l)
  {
    return symbol_type (token::DUTOK_SEMICOLON, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_DOT (const location_type& l)
  {
    return symbol_type (token::DUTOK_DOT, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_COMMA (const location_type& l)
  {
    return symbol_type (token::DUTOK_COMMA, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_EQ (const location_type& l)
  {
    return symbol_type (token::DUTOK_EQ, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_COLON (const location_type& l)
  {
    return symbol_type (token::DUTOK_COLON, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_LPAR (const location_type& l)
  {
    return symbol_type (token::DUTOK_LPAR, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_RPAR (const location_type& l)
  {
    return symbol_type (token::DUTOK_RPAR, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_DOTDOT (const location_type& l)
  {
    return symbol_type (token::DUTOK_DOTDOT, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_LSBRA (const location_type& l)
  {
    return symbol_type (token::DUTOK_LSBRA, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_RSBRA (const location_type& l)
  {
    return symbol_type (token::DUTOK_RSBRA, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_ASSIGN (const location_type& l)
  {
    return symbol_type (token::DUTOK_ASSIGN, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_OPER_REL (const mlc::DUTOKGE_OPER_REL& v, const location_type& l)
  {
    return symbol_type (token::DUTOK_OPER_REL, v, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_OPER_SIGNADD (const mlc::DUTOKGE_OPER_SIGNADD& v, const location_type& l)
  {
    return symbol_type (token::DUTOK_OPER_SIGNADD, v, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_OPER_MUL (const mlc::DUTOKGE_OPER_MUL& v, const location_type& l)
  {
    return symbol_type (token::DUTOK_OPER_MUL, v, l);

  }

   mlaskal_parser ::symbol_type
   mlaskal_parser ::make_FOR_DIRECTION (const mlc::DUTOKGE_FOR_DIRECTION& v, const location_type& l)
  {
    return symbol_type (token::DUTOK_FOR_DIRECTION, v, l);

  }



} // yy
#line @oline@ @ofile@ // lalr1.cc:371




#endif // !YY_YY_DU3456G_HPP_INCLUDED
@output(du3456g.cpp@)@
// A Bison parser, made by GNU Bison 3.0.4.

// Skeleton implementation for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2013 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.


// First part of user declarations.

#line @oline@ @ofile@ // lalr1.cc:398

# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif

#include "@basename(du3456g.hpp@)"

// User implementation prologue.

#line @oline@ @ofile@ // lalr1.cc:406
// Unqualified %code blocks.
#line 37 "C:\\Users\\Martin\\source\\repos\\PascalTranslater\\mlaskal\\private-src\\du3456g.y" // lalr1.cc:407

	// this code is emitted to du3456g.cpp

	// declare yylex here
	#include "bisonflex.hpp"
	YY_DECL;

	// allow access to context
	#include "dutables.hpp"

	// other user-required contents
	#include<assert.h>
	#include <stdlib.h>

    /* local stuff */
    using namespace mlc;


#line @oline@ @ofile@ // lalr1.cc:407


#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> // FIXME: INFRINGES ON USER NAME SPACE.
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K].location)
/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

# ifndef YYLLOC_DEFAULT
#  define YYLLOC_DEFAULT(Current, Rhs, N)                               \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).begin  = YYRHSLOC (Rhs, 1).begin;                   \
          (Current).end    = YYRHSLOC (Rhs, N).end;                     \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).begin = (Current).end = YYRHSLOC (Rhs, 0).end;      \
        }                                                               \
    while (/*CONSTCOND*/ false)
# endif


// Suppress unused-variable warnings by "using" E.
#define YYUSE(E) ((void) (E))

// Enable debugging if requested.
#if YYDEBUG

// A pseudo ostream that takes yydebug_ into account.
# define YYCDEBUG if (yydebug_) (*yycdebug_)

# define YY_SYMBOL_PRINT(Title, Symbol)         \
  do {                                          \
    if (yydebug_)                               \
    {                                           \
      *yycdebug_ << Title << ' ';               \
      yy_print_ (*yycdebug_, Symbol);           \
      *yycdebug_ << std::endl;                  \
    }                                           \
  } while (false)

# define YY_REDUCE_PRINT(Rule)          \
  do {                                  \
    if (yydebug_)                       \
      yy_reduce_print_ (Rule);          \
  } while (false)

# define YY_STACK_PRINT()               \
  do {                                  \
    if (yydebug_)                       \
      yystack_print_ ();                \
  } while (false)

#else // !YYDEBUG

# define YYCDEBUG if (false) std::cerr
# define YY_SYMBOL_PRINT(Title, Symbol)  YYUSE(Symbol)
# define YY_REDUCE_PRINT(Rule)           static_cast<void>(0)
# define YY_STACK_PRINT()                static_cast<void>(0)

#endif // !YYDEBUG

#define yyerrok         (yyerrstatus_ = 0)
#define yyclearin       (yyempty = true)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYRECOVERING()  (!!yyerrstatus_)


namespace yy {
#line @oline@ @ofile@ // lalr1.cc:473

  /* Return YYSTR after stripping away unnecessary quotes and
     backslashes, so that it's suitable for yyerror.  The heuristic is
     that double-quoting is unnecessary unless the string contains an
     apostrophe, a comma, or backslash (other than backslash-backslash).
     YYSTR is taken from yytname.  */
  std::string
   mlaskal_parser ::yytnamerr_ (const char *yystr)
  {
    if (*yystr == '"')
      {
        std::string yyr = "";
        char const *yyp = yystr;

        for (;;)
          switch (*++yyp)
            {
            case '\'':
            case ',':
              goto do_not_strip_quotes;

            case '\\':
              if (*++yyp != '\\')
                goto do_not_strip_quotes;
              // Fall through.
            default:
              yyr += *yyp;
              break;

            case '"':
              return yyr;
            }
      do_not_strip_quotes: ;
      }

    return yystr;
  }


  /// Build a parser object.
   mlaskal_parser :: mlaskal_parser  (mlc::yyscan_t2 yyscanner_yyarg, mlc::MlaskalCtx* ctx_yyarg)
    :
#if YYDEBUG
      yydebug_ (false),
      yycdebug_ (&std::cerr),
#endif
      yyscanner (yyscanner_yyarg),
      ctx (ctx_yyarg)
  {}

   mlaskal_parser ::~ mlaskal_parser  ()
  {}


  /*---------------.
  | Symbol types.  |
  `---------------*/



  // by_state.
  inline
   mlaskal_parser ::by_state::by_state ()
    : state (empty)
  {}

  inline
   mlaskal_parser ::by_state::by_state (const by_state& other)
    : state (other.state)
  {}

  inline
  void
   mlaskal_parser ::by_state::move (by_state& that)
  {
    state = that.state;
    that.state = empty;
  }

  inline
   mlaskal_parser ::by_state::by_state (state_type s)
    : state (s)
  {}

  inline
   mlaskal_parser ::symbol_number_type
   mlaskal_parser ::by_state::type_get () const
  {
    return state == empty ? 0 : yystos_[state];
  }

  inline
   mlaskal_parser ::stack_symbol_type::stack_symbol_type ()
  {}


  inline
   mlaskal_parser ::stack_symbol_type::stack_symbol_type (state_type s, symbol_type& that)
    : super_type (s, that.location)
  {
      switch (that.type_get ())
    {
      case 44: // FOR_DIRECTION
        value.move< mlc::DUTOKGE_FOR_DIRECTION > (that.value);
        break;

      case 43: // OPER_MUL
        value.move< mlc::DUTOKGE_OPER_MUL > (that.value);
        break;

      case 41: // OPER_REL
        value.move< mlc::DUTOKGE_OPER_REL > (that.value);
        break;

      case 42: // OPER_SIGNADD
        value.move< mlc::DUTOKGE_OPER_SIGNADD > (that.value);
        break;

      case 26: // IDENTIFIER
        value.move< mlc::ls_id_index > (that.value);
        break;

      case 27: // UINT
        value.move< mlc::ls_int_index > (that.value);
        break;

      case 28: // REAL
        value.move< mlc::ls_real_index > (that.value);
        break;

      case 29: // STRING
        value.move< mlc::ls_str_index > (that.value);
        break;

      default:
        break;
    }

    // that is emptied.
    that.type = empty;
  }

  inline
   mlaskal_parser ::stack_symbol_type&
   mlaskal_parser ::stack_symbol_type::operator= (const stack_symbol_type& that)
  {
    state = that.state;
      switch (that.type_get ())
    {
      case 44: // FOR_DIRECTION
        value.copy< mlc::DUTOKGE_FOR_DIRECTION > (that.value);
        break;

      case 43: // OPER_MUL
        value.copy< mlc::DUTOKGE_OPER_MUL > (that.value);
        break;

      case 41: // OPER_REL
        value.copy< mlc::DUTOKGE_OPER_REL > (that.value);
        break;

      case 42: // OPER_SIGNADD
        value.copy< mlc::DUTOKGE_OPER_SIGNADD > (that.value);
        break;

      case 26: // IDENTIFIER
        value.copy< mlc::ls_id_index > (that.value);
        break;

      case 27: // UINT
        value.copy< mlc::ls_int_index > (that.value);
        break;

      case 28: // REAL
        value.copy< mlc::ls_real_index > (that.value);
        break;

      case 29: // STRING
        value.copy< mlc::ls_str_index > (that.value);
        break;

      default:
        break;
    }

    location = that.location;
    return *this;
  }


  template <typename Base>
  inline
  void
   mlaskal_parser ::yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const
  {
    if (yymsg)
      YY_SYMBOL_PRINT (yymsg, yysym);
  }

#if YYDEBUG
  template <typename Base>
  void
   mlaskal_parser ::yy_print_ (std::ostream& yyo,
                                     const basic_symbol<Base>& yysym) const
  {
    std::ostream& yyoutput = yyo;
    YYUSE (yyoutput);
    symbol_number_type yytype = yysym.type_get ();
    yyo << (yytype < yyntokens_ ? "token" : "nterm")
        << ' ' << yytname_[yytype] << " ("
        << yysym.location << ": ";
    YYUSE (yytype);
    yyo << ')';
  }
#endif

  inline
  void
   mlaskal_parser ::yypush_ (const char* m, state_type s, symbol_type& sym)
  {
    stack_symbol_type t (s, sym);
    yypush_ (m, t);
  }

  inline
  void
   mlaskal_parser ::yypush_ (const char* m, stack_symbol_type& s)
  {
    if (m)
      YY_SYMBOL_PRINT (m, s);
    yystack_.push (s);
  }

  inline
  void
   mlaskal_parser ::yypop_ (unsigned int n)
  {
    yystack_.pop (n);
  }

#if YYDEBUG
  std::ostream&
   mlaskal_parser ::debug_stream () const
  {
    return *yycdebug_;
  }

  void
   mlaskal_parser ::set_debug_stream (std::ostream& o)
  {
    yycdebug_ = &o;
  }


   mlaskal_parser ::debug_level_type
   mlaskal_parser ::debug_level () const
  {
    return yydebug_;
  }

  void
   mlaskal_parser ::set_debug_level (debug_level_type l)
  {
    yydebug_ = l;
  }
#endif // YYDEBUG

  inline  mlaskal_parser ::state_type
   mlaskal_parser ::yy_lr_goto_state_ (state_type yystate, int yylhs)
  {
    int yyr = yypgoto_[yylhs - yyntokens_] + yystate;
    if (0 <= yyr && yyr <= yylast_ && yycheck_[yyr] == yystate)
      return yytable_[yyr];
    else
      return yydefgoto_[yylhs - yyntokens_];
  }

  inline bool
   mlaskal_parser ::yy_pact_value_is_default_ (int yyvalue)
  {
    return yyvalue == yypact_ninf_;
  }

  inline bool
   mlaskal_parser ::yy_table_value_is_error_ (int yyvalue)
  {
    return yyvalue == yytable_ninf_;
  }

  int
   mlaskal_parser ::parse ()
  {
    /// Whether yyla contains a lookahead.
    bool yyempty = true;

    // State.
    int yyn;
    int yylen = 0;

    // Error handling.
    int yynerrs_ = 0;
    int yyerrstatus_ = 0;

    /// The lookahead symbol.
    symbol_type yyla;

    /// The locations where the error started and ended.
    stack_symbol_type yyerror_range[3];

    /// $$ and @@$.
    stack_symbol_type yylhs;

    /// The return value of parse ().
    int yyresult;

    // FIXME: This shoud be completely indented.  It is not yet to
    // avoid gratuitous conflicts when merging into the master branch.
    try
      {
    YYCDEBUG << "Starting parse" << std::endl;


    /* Initialize the stack.  The initial state will be set in
       yynewstate, since the latter expects the semantical and the
       location values to have been already stored, initialize these
       stacks with a primary value.  */
    yystack_.clear ();
    yypush_ (YY_NULL, 0, yyla);

    // A new symbol was pushed on the stack.
  yynewstate:
    YYCDEBUG << "Entering state " << yystack_[0].state << std::endl;

    // Accept?
    if (yystack_[0].state == yyfinal_)
      goto yyacceptlab;

    goto yybackup;

    // Backup.
  yybackup:

    // Try to take a decision without lookahead.
    yyn = yypact_[yystack_[0].state];
    if (yy_pact_value_is_default_ (yyn))
      goto yydefault;

    // Read a lookahead token.
    if (yyempty)
      {
        YYCDEBUG << "Reading a token: ";
        try
          {
            symbol_type yylookahead (yylex (yyscanner, ctx));
            yyla.move (yylookahead);
          }
        catch (const syntax_error& yyexc)
          {
            error (yyexc);
            goto yyerrlab1;
          }
        yyempty = false;
      }
    YY_SYMBOL_PRINT ("Next token is", yyla);

    /* If the proper action on seeing token YYLA.TYPE is to reduce or
       to detect an error, take that action.  */
    yyn += yyla.type_get ();
    if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yyla.type_get ())
      goto yydefault;

    // Reduce or error.
    yyn = yytable_[yyn];
    if (yyn <= 0)
      {
        if (yy_table_value_is_error_ (yyn))
          goto yyerrlab;
        yyn = -yyn;
        goto yyreduce;
      }

    // Discard the token being shifted.
    yyempty = true;

    // Count tokens shifted since error; after three, turn off error status.
    if (yyerrstatus_)
      --yyerrstatus_;

    // Shift the lookahead token.
    yypush_ ("Shifting", yyn, yyla);
    goto yynewstate;

  /*-----------------------------------------------------------.
  | yydefault -- do the default action for the current state.  |
  `-----------------------------------------------------------*/
  yydefault:
    yyn = yydefact_[yystack_[0].state];
    if (yyn == 0)
      goto yyerrlab;
    goto yyreduce;

  /*-----------------------------.
  | yyreduce -- Do a reduction.  |
  `-----------------------------*/
  yyreduce:
    yylen = yyr2_[yyn];
    yylhs.state = yy_lr_goto_state_(yystack_[yylen].state, yyr1_[yyn]);
    /* Variants are always initialized to an empty instance of the
       correct type. The default $$=$1 action is NOT applied when using
       variants.  */
      switch (yyr1_@{yyn@})
    {
      case 44: // FOR_DIRECTION
        yylhs.value.build< mlc::DUTOKGE_FOR_DIRECTION > ();
        break;

      case 43: // OPER_MUL
        yylhs.value.build< mlc::DUTOKGE_OPER_MUL > ();
        break;

      case 41: // OPER_REL
        yylhs.value.build< mlc::DUTOKGE_OPER_REL > ();
        break;

      case 42: // OPER_SIGNADD
        yylhs.value.build< mlc::DUTOKGE_OPER_SIGNADD > ();
        break;

      case 26: // IDENTIFIER
        yylhs.value.build< mlc::ls_id_index > ();
        break;

      case 27: // UINT
        yylhs.value.build< mlc::ls_int_index > ();
        break;

      case 28: // REAL
        yylhs.value.build< mlc::ls_real_index > ();
        break;

      case 29: // STRING
        yylhs.value.build< mlc::ls_str_index > ();
        break;

      default:
        break;
    }


    // Compute the default @@$.
    {
      slice<stack_symbol_type, stack_type> slice (yystack_, yylen);
      YYLLOC_DEFAULT (yylhs.location, slice, yylen);
    }

    // Perform the reduction.
    YY_REDUCE_PRINT (yyn);
    try
      {
        switch (yyn)
          {

#line @oline@ @ofile@ // lalr1.cc:846
          default:
            break;
          }
      }
    catch (const syntax_error& yyexc)
      {
        error (yyexc);
        YYERROR;
      }
    YY_SYMBOL_PRINT ("-> $$ =", yylhs);
    yypop_ (yylen);
    yylen = 0;
    YY_STACK_PRINT ();

    // Shift the result of the reduction.
    yypush_ (YY_NULL, yylhs);
    goto yynewstate;

  /*--------------------------------------.
  | yyerrlab -- here on detecting error.  |
  `--------------------------------------*/
  yyerrlab:
    // If not already recovering from an error, report this error.
    if (!yyerrstatus_)
      {
        ++yynerrs_;
        error (yyla.location, yysyntax_error_ (yystack_[0].state,
                                           yyempty ? yyempty_ : yyla.type_get ()));
      }


    yyerror_range[1].location = yyla.location;
    if (yyerrstatus_ == 3)
      {
        /* If just tried and failed to reuse lookahead token after an
           error, discard it.  */

        // Return failure if at end of input.
        if (yyla.type_get () == yyeof_)
          YYABORT;
        else if (!yyempty)
          {
            yy_destroy_ ("Error: discarding", yyla);
            yyempty = true;
          }
      }

    // Else will try to reuse lookahead token after shifting the error token.
    goto yyerrlab1;


  /*---------------------------------------------------.
  | yyerrorlab -- error raised explicitly by YYERROR.  |
  `---------------------------------------------------*/
  yyerrorlab:

    /* Pacify compilers like GCC when the user code never invokes
       YYERROR and the label yyerrorlab therefore never appears in user
       code.  */
    if (false)
      goto yyerrorlab;
    yyerror_range[1].location = yystack_[yylen - 1].location;
    /* $$ was initialized before running the user action.  */
    YY_SYMBOL_PRINT ("Error: discarding", yylhs);
    yylhs.~stack_symbol_type();
    /* Do not reclaim the symbols of the rule whose action triggered
       this YYERROR.  */
    yypop_ (yylen);
    yylen = 0;
    goto yyerrlab1;

  /*-------------------------------------------------------------.
  | yyerrlab1 -- common code for both syntax error and YYERROR.  |
  `-------------------------------------------------------------*/
  yyerrlab1:
    yyerrstatus_ = 3;   // Each real token shifted decrements this.
    {
      stack_symbol_type error_token;
      for (;;)
        {
          yyn = yypact_[yystack_[0].state];
          if (!yy_pact_value_is_default_ (yyn))
            {
              yyn += yyterror_;
              if (0 <= yyn && yyn <= yylast_ && yycheck_[yyn] == yyterror_)
                {
                  yyn = yytable_[yyn];
                  if (0 < yyn)
                    break;
                }
            }

          // Pop the current state because it cannot handle the error token.
          if (yystack_.size () == 1)
            YYABORT;

          yyerror_range[1].location = yystack_[0].location;
          yy_destroy_ ("Error: popping", yystack_[0]);
          yypop_ ();
          YY_STACK_PRINT ();
        }

      yyerror_range[2].location = yyla.location;
      YYLLOC_DEFAULT (error_token.location, yyerror_range, 2);

      // Shift the error token.
      error_token.state = yyn;
      yypush_ ("Shifting", error_token);
    }
    goto yynewstate;

    // Accept.
  yyacceptlab:
    yyresult = 0;
    goto yyreturn;

    // Abort.
  yyabortlab:
    yyresult = 1;
    goto yyreturn;

  yyreturn:
    if (!yyempty)
      yy_destroy_ ("Cleanup: discarding lookahead", yyla);

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYABORT or YYACCEPT.  */
    yypop_ (yylen);
    while (1 < yystack_.size ())
      {
        yy_destroy_ ("Cleanup: popping", yystack_[0]);
        yypop_ ();
      }

    return yyresult;
  }
    catch (...)
      {
        YYCDEBUG << "Exception caught: cleaning lookahead and stack"
                 << std::endl;
        // Do not try to display the values of the reclaimed symbols,
        // as their printer might throw an exception.
        if (!yyempty)
          yy_destroy_ (YY_NULL, yyla);

        while (1 < yystack_.size ())
          {
            yy_destroy_ (YY_NULL, yystack_[0]);
            yypop_ ();
          }
        throw;
      }
  }

  void
   mlaskal_parser ::error (const syntax_error& yyexc)
  {
    error (yyexc.location, yyexc.what());
  }

  // Generate an error message.
  std::string
   mlaskal_parser ::yysyntax_error_ (state_type yystate, symbol_number_type yytoken) const
  {
    std::string yyres;
    // Number of reported tokens (one for the "unexpected", one per
    // "expected").
    size_t yycount = 0;
    // Its maximum.
    enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
    // Arguments of yyformat.
    char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];

    /* There are many possibilities here to consider:
       - If this state is a consistent state with a default action, then
         the only way this function was invoked is if the default action
         is an error action.  In that case, don't check for expected
         tokens because there are none.
       - The only way there can be no lookahead present (in yytoken) is
         if this state is a consistent state with a default action.
         Thus, detecting the absence of a lookahead is sufficient to
         determine that there is no unexpected or expected token to
         report.  In that case, just report a simple "syntax error".
       - Don't assume there isn't a lookahead just because this state is
         a consistent state with a default action.  There might have
         been a previous inconsistent state, consistent state with a
         non-default action, or user semantic action that manipulated
         yyla.  (However, yyla is currently not documented for users.)
       - Of course, the expected token list depends on states to have
         correct lookahead information, and it depends on the parser not
         to perform extra reductions after fetching a lookahead from the
         scanner and before detecting a syntax error.  Thus, state
         merging (from LALR or IELR) and default reductions corrupt the
         expected token list.  However, the list is correct for
         canonical LR with one exception: it will still contain any
         token that will not be accepted due to an error action in a
         later state.
    */
    if (yytoken != yyempty_)
      {
        yyarg[yycount++] = yytname_[yytoken];
        int yyn = yypact_[yystate];
        if (!yy_pact_value_is_default_ (yyn))
          {
            /* Start YYX at -YYN if negative to avoid negative indexes in
               YYCHECK.  In other words, skip the first -YYN actions for
               this state because they are default actions.  */
            int yyxbegin = yyn < 0 ? -yyn : 0;
            // Stay within bounds of both yycheck and yytname.
            int yychecklim = yylast_ - yyn + 1;
            int yyxend = yychecklim < yyntokens_ ? yychecklim : yyntokens_;
            for (int yyx = yyxbegin; yyx < yyxend; ++yyx)
              if (yycheck_[yyx + yyn] == yyx && yyx != yyterror_
                  && !yy_table_value_is_error_ (yytable_[yyx + yyn]))
                {
                  if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                    {
                      yycount = 1;
                      break;
                    }
                  else
                    yyarg[yycount++] = yytname_[yyx];
                }
          }
      }

    char const* yyformat = YY_NULL;
    switch (yycount)
      {
#define YYCASE_(N, S)                         \
        case N:                               \
          yyformat = S;                       \
        break
        YYCASE_(0, YY_("syntax error"));
        YYCASE_(1, YY_("syntax error, unexpected %s"));
        YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
        YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
        YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
        YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
      }

    // Argument number.
    size_t yyi = 0;
    for (char const* yyp = yyformat; *yyp; ++yyp)
      if (yyp[0] == '%' && yyp[1] == 's' && yyi < yycount)
        {
          yyres += yytnamerr_ (yyarg[yyi++]);
          ++yyp;
        }
      else
        yyres += *yyp;
    return yyres;
  }


  const short int  mlaskal_parser ::yypact_ninf_ = -151;

  const signed char  mlaskal_parser ::yytable_ninf_ = -103;

  const short int
   mlaskal_parser ::yypact_[] =
  {
      72,    31,    93,    79,  -151,   192,    95,   121,   195,   215,
      10,   225,   226,   161,   203,  -151,  -151,  -151,  -151,  -151,
     220,   122,   223,  -151,   113,   196,    63,   222,    80,  -151,
     139,   102,   224,  -151,   103,    18,   227,   126,  -151,  -151,
    -151,   229,   230,    17,    17,  -151,   234,   148,   231,  -151,
       3,   232,  -151,   228,     3,  -151,   147,  -151,    10,   236,
     107,   107,   138,   240,   177,   166,  -151,    33,    57,   241,
      57,    17,    17,   121,   195,   215,   219,  -151,   238,  -151,
    -151,  -151,   239,  -151,  -151,  -151,  -151,  -151,   216,  -151,
     242,   148,   218,   233,  -151,   221,   243,  -151,  -151,   237,
       3,  -151,   245,     3,    23,  -151,   156,    89,  -151,  -151,
    -151,   107,   156,   244,  -151,   255,    51,    44,   214,  -151,
    -151,   257,    84,   246,   107,   107,   107,  -151,   251,  -151,
      49,   200,  -151,   142,   248,   249,    70,    54,     9,  -151,
    -151,  -151,  -151,  -151,  -151,   250,     7,  -151,  -151,  -151,
       7,   253,  -151,   254,  -151,  -151,   107,   252,    44,   107,
      29,   107,   107,   156,   156,   156,    33,   107,   107,   184,
    -151,    65,  -151,  -151,   201,    74,  -151,   259,   261,   247,
    -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,    87,  -151,
    -151,  -151,   186,  -151,    98,  -151,   272,   136,  -151,  -151,
     214,   214,  -151,  -151,  -151,   256,   107,  -151,   107,  -151,
     264,   251,   204,  -151,  -151,   265,     7,   279,  -151,   258,
      33,    10,   266,   107,   107,   138,   268,     1,   199,   107,
    -151,  -151,  -151,   208,   269,  -151,  -151,     3,  -151,    38,
     280,   282,   283,   111,   263,   107,   107,   285,   273,  -151,
    -151,   284,    29,    29,   107,   107,   187,   288,    33,  -151,
     289,  -151,   290,   267,   291,  -151,    29,   107,  -151,   293,
      29,  -151
  };

  const unsigned char
   mlaskal_parser ::yydefact_[] =
  {
       0,     0,     0,     0,     1,     0,     0,     0,     0,     0,
      76,     0,     0,     0,     0,     4,     7,     9,    11,    12,
       0,     0,     0,    15,     0,     0,     0,     0,     0,    21,
       0,     0,     0,    77,     0,     0,    37,     0,     2,     3,
      13,     0,     0,     0,     0,     5,     0,     0,     0,     6,
       0,     0,     8,     0,     0,    10,     0,    75,    76,     0,
       0,     0,    76,     0,    56,     0,    14,    76,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,    30,
      32,    34,     0,    16,   112,   109,   110,   111,     0,   113,
       0,     0,     0,    48,   105,     0,     0,    49,    47,     0,
       0,    22,     0,     0,     0,    58,     0,    98,   108,   106,
     107,     0,     0,     0,    97,     0,    86,    90,    93,    94,
      96,     0,     0,     0,     0,     0,     0,    78,     0,    45,
       0,     0,    39,     0,     0,     0,     0,     0,     0,    29,
      25,    26,   114,   115,    17,     0,     0,   103,   104,    19,
       0,     0,    23,     0,    59,   101,     0,     0,    89,     0,
      76,     0,     0,     0,     0,     0,    76,     0,     0,     0,
      84,     0,    82,    55,     0,     0,    38,     0,     0,     0,
      27,    28,    31,    33,    35,    18,   102,    52,     0,    51,
      20,    24,     0,   100,     0,    60,     0,     0,    88,    87,
      92,    91,    95,    62,    63,     0,     0,    57,     0,    79,
       0,     0,     0,    46,    42,     0,     0,     0,    99,    81,
      76,    76,     0,     0,     0,    76,     0,    56,     0,     0,
      85,    83,    41,     0,     0,    40,    53,     0,    61,     0,
      58,     0,     0,     0,     0,     0,     0,     0,     0,    44,
      50,    59,    76,    76,     0,     0,     0,    55,    76,    43,
       0,    72,    63,     0,    57,    64,    76,     0,    71,     0,
      76,    74
  };

  const short int
   mlaskal_parser ::yypgoto_[] =
  {
    -151,  -151,  -151,   304,   296,   287,   286,   292,     0,  -151,
     260,   262,   -23,   270,  -151,   -28,   271,   179,   180,   298,
     299,   274,  -117,   -48,  -151,  -134,  -151,   -65,  -113,  -150,
     -55,   -30,  -151,   157,  -147,   -60,    88,   209,    82,   -93,
     170,  -151,  -151,   235
  };

  const short int
   mlaskal_parser ::yydefgoto_[] =
  {
      -1,     2,    13,    76,    15,    16,    17,    18,    77,    24,
      26,    28,    30,    31,    20,    78,    79,    80,    81,    21,
      22,   130,   131,    96,    97,    98,   188,    33,   196,    34,
      35,   113,   114,   171,   169,   170,   116,   117,   118,   119,
      99,   120,    89,    90
  };

  const short int
   mlaskal_parser ::yytable_[] =
  {
     115,   121,   127,   104,    65,    19,   102,   122,    56,   192,
     197,   174,   187,   155,    19,    92,    82,    10,   -67,   -54,
      40,     6,    73,    74,    75,    10,    19,    66,    19,    93,
      94,    19,   154,   186,    94,    29,   245,    32,   -54,   -80,
     -54,   -80,   -54,   134,   135,    95,   -65,   251,    67,    95,
     -54,   157,   151,    67,   -54,   153,    32,     3,   212,   -54,
      32,    75,    10,   -54,   128,   172,   173,   163,    67,     8,
       9,    10,   202,    11,    12,     1,    74,    75,    10,   175,
      51,   211,   236,   129,   161,   176,   164,     9,    10,    48,
      11,    12,   162,     4,   233,   195,    48,   208,   256,   172,
     129,   203,   197,   197,   209,   167,    51,   204,   205,     5,
      10,    58,    11,    12,    67,    56,   197,    59,    60,   216,
     197,    61,    23,    62,   156,    63,   217,   -80,    29,    64,
     208,   106,   254,   107,   108,   109,   110,   219,   184,   260,
     261,    67,   111,    45,   221,    46,   230,    25,   231,   112,
     222,   223,    43,   268,   224,   238,   225,   271,   226,   -54,
      69,    70,   227,   241,   242,    32,   239,   228,   -54,   247,
     243,    53,   175,    54,    84,    85,    86,    87,   179,    53,
     106,   103,   107,   108,   109,   110,   257,   195,   203,   250,
      88,   111,    38,   265,   262,   263,     6,     7,     8,     9,
      10,   238,    11,    12,   125,   265,   126,   269,     7,     8,
       9,    10,   124,    11,    12,   -80,   206,   -80,   206,   206,
     207,    27,   218,   264,    73,    74,    75,    10,    10,    47,
      11,    12,   177,   177,   178,   210,   177,   125,   234,   246,
     177,    29,   248,   142,   143,   200,   201,   147,   148,   198,
     199,    36,    37,    44,   101,    50,   146,   165,    57,    71,
      72,    83,    68,   105,    91,   100,   123,   132,   140,   141,
    -102,   160,   144,   149,   150,   152,   166,   129,   180,   181,
     185,   215,   159,   190,   191,   213,   168,   214,   193,   220,
     232,   235,   237,   240,   244,   249,   -79,   -69,   252,   259,
     229,   -70,   253,   255,   258,   -66,   266,   -73,   -68,    14,
      39,   267,   270,    49,    52,   182,   194,   183,    41,    42,
     189,   158,     0,    55,     0,     0,   145,     0,     0,     0,
       0,     0,     0,   136,     0,     0,   137,     0,     0,     0,
       0,     0,     0,     0,   133,   138,     0,   139
  };

  const short int
   mlaskal_parser ::yycheck_[] =
  {
      60,    61,    67,    58,    34,     5,    54,    62,    31,   156,
     160,   128,   146,   106,    14,    12,    44,     8,    17,     9,
      20,     4,     5,     6,     7,     8,    26,     9,    28,    26,
      27,    31,     9,    26,    27,    26,    35,    27,     9,    38,
      30,    40,     9,    71,    72,    42,    17,     9,    30,    42,
      21,   111,   100,    30,    21,   103,    27,    26,   175,    30,
      27,     7,     8,    30,     7,   125,   126,    23,    30,     6,
       7,     8,   165,    10,    11,     3,     6,     7,     8,    30,
      26,     7,   216,    26,    33,    36,    42,     7,     8,    26,
      10,    11,    41,     0,   211,   160,    26,    32,   245,   159,
      26,   166,   252,   253,    39,    21,    26,   167,   168,    30,
       8,     8,    10,    11,    30,   138,   266,    14,    15,    32,
     270,    18,    27,    20,    35,    22,    39,    38,    26,    26,
      32,    24,    21,    26,    27,    28,    29,    39,   138,   252,
     253,    30,    35,    30,     8,    32,   206,    26,   208,    42,
      14,    15,    30,   266,    18,   220,    20,   270,    22,    21,
      34,    35,    26,   223,   224,    27,   221,   197,    30,   229,
     225,    32,    30,    34,    26,    27,    28,    29,    36,    32,
      24,    34,    26,    27,    28,    29,   246,   252,   253,   237,
      42,    35,    31,   258,   254,   255,     4,     5,     6,     7,
       8,   266,    10,    11,    38,   270,    40,   267,     5,     6,
       7,     8,    35,    10,    11,    38,    32,    40,    32,    32,
      36,    26,    36,    36,     5,     6,     7,     8,     8,    33,
      10,    11,    32,    32,    34,    34,    32,    38,    34,    40,
      32,    26,    34,    27,    28,   163,   164,    26,    27,   161,
     162,    26,    26,    30,    26,    33,    38,    43,    34,    30,
      30,    27,    35,    27,    33,    33,    26,    26,    30,    30,
      37,    16,    30,    30,    37,    30,    19,    26,    30,    30,
      30,    34,    38,    30,    30,    26,    40,    26,    36,    17,
      26,    26,    13,    27,    26,    26,    38,    17,    16,    26,
      44,    17,    19,    40,    19,    17,    17,    17,    17,     5,
      14,    44,    19,    26,    28,   136,   159,   137,    20,    20,
     150,   112,    -1,    31,    -1,    -1,    91,    -1,    -1,    -1,
      -1,    -1,    -1,    73,    -1,    -1,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    70,    75,    -1,    76
  };

  const unsigned char
   mlaskal_parser ::yystos_[] =
  {
       0,     3,    46,    26,     0,    30,     4,     5,     6,     7,
       8,    10,    11,    47,    48,    49,    50,    51,    52,    53,
      59,    64,    65,    27,    54,    26,    55,    26,    56,    26,
      57,    58,    27,    72,    74,    75,    26,    26,    31,    49,
      53,    64,    65,    30,    30,    30,    32,    33,    26,    50,
      33,    26,    51,    32,    34,    52,    57,    34,     8,    14,
      15,    18,    20,    22,    26,    76,     9,    30,    35,    34,
      35,    30,    30,     5,     6,     7,    48,    53,    60,    61,
      62,    63,    60,    27,    26,    27,    28,    29,    42,    87,
      88,    33,    12,    26,    27,    42,    68,    69,    70,    85,
      33,    26,    68,    34,    75,    27,    24,    26,    27,    28,
      29,    35,    42,    76,    77,    80,    81,    82,    83,    84,
      86,    80,    75,    26,    35,    38,    40,    72,     7,    26,
      66,    67,    26,    66,    60,    60,    55,    56,    58,    61,
      30,    30,    27,    28,    30,    88,    38,    26,    27,    30,
      37,    68,    30,    68,     9,    84,    35,    80,    82,    38,
      16,    33,    41,    23,    42,    43,    19,    21,    40,    79,
      80,    78,    80,    80,    67,    30,    36,    32,    34,    36,
      30,    30,    62,    63,    53,    30,    26,    70,    71,    85,
      30,    30,    79,    36,    78,    72,    73,    74,    81,    81,
      83,    83,    84,    72,    80,    80,    32,    36,    32,    39,
      34,     7,    67,    26,    26,    34,    32,    39,    36,    39,
      17,     8,    14,    15,    18,    20,    22,    26,    76,    44,
      80,    80,    26,    67,    34,    26,    70,    13,    72,    75,
      27,    80,    80,    75,    26,    35,    40,    80,    34,    26,
      68,     9,    16,    19,    21,    40,    79,    80,    19,    26,
      73,    73,    80,    80,    36,    72,    17,    44,    73,    80,
      19,    73
  };

  const unsigned char
   mlaskal_parser ::yyr1_[] =
  {
       0,    45,    46,    47,    47,    48,    49,    49,    50,    50,
      51,    51,    52,    52,    53,    54,    54,    55,    55,    56,
      56,    57,    57,    58,    58,    59,    59,    59,    59,    60,
      60,    61,    61,    62,    62,    63,    63,    64,    64,    65,
      65,    66,    66,    66,    66,    67,    67,    68,    68,    68,
      69,    70,    71,    71,    72,    72,    72,    72,    72,    72,
      72,    72,    72,    72,    72,    73,    73,    73,    73,    73,
      73,    73,    73,    73,    73,    74,    74,    75,    75,    76,
      76,    77,    78,    78,    79,    79,    80,    80,    80,    81,
      81,    82,    82,    82,    83,    83,    84,    84,    84,    84,
      84,    84,    85,    85,    85,    85,    86,    86,    86,    87,
      87,    87,    87,    88,    88,    88
  };

  const unsigned char
   mlaskal_parser ::yyr2_[] =
  {
       0,     2,     5,     2,     1,     3,     3,     1,     3,     1,
       3,     1,     1,     2,     3,     1,     3,     4,     5,     4,
       5,     1,     3,     4,     5,     4,     4,     5,     5,     2,
       1,     3,     1,     3,     1,     3,     1,     2,     5,     4,
       7,     4,     3,     6,     5,     1,     3,     1,     1,     1,
       6,     3,     1,     3,     0,     4,     2,     5,     3,     4,
       5,     7,     5,     5,     9,     0,     4,     2,     5,     3,
       4,     7,     5,     5,     9,     2,     0,     1,     3,     4,
       1,     4,     1,     3,     1,     3,     1,     3,     3,     2,
       1,     3,     3,     1,     1,     3,     1,     1,     1,     4,
       3,     2,     1,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2
  };



  // YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
  // First, the terminals, then, starting at \a yyntokens_, nonterminals.
  const char*
  const  mlaskal_parser ::yytname_[] =
  {
  "\"end of file\"", "error", "$undefined", "PROGRAM", "LABEL", "CONST",
  "TYPE", "VAR", "BEGIN", "END", "PROCEDURE", "FUNCTION", "ARRAY", "OF",
  "GOTO", "IF", "THEN", "ELSE", "WHILE", "DO", "REPEAT", "UNTIL", "FOR",
  "OR", "NOT", "RECORD", "IDENTIFIER", "UINT", "REAL", "STRING",
  "SEMICOLON", "DOT", "COMMA", "EQ", "COLON", "LPAR", "RPAR", "DOTDOT",
  "LSBRA", "RSBRA", "ASSIGN", "OPER_REL", "OPER_SIGNADD", "OPER_MUL",
  "FOR_DIRECTION", "$accept", "mlaskal", "block_P", "start_block",
  "const_block", "type_block", "var_block", "procedure_block", "end_block",
  "C1", "C2", "C3", "C4", "C5", "C7", "block", "const_block2",
  "type_block2", "var_block2", "procedure_header", "function_header",
  "form_par", "id_cycl", "type", "struc_type", "ord_type", "ord_type_cycl",
  "statement", "statement2", "D0", "state_cycle", "variable",
  "variable_withoutID", "ord_expr_cylc", "real_par", "expression",
  "simp_expression", "term_oper", "term", "factor", "ord_const",
  "unsigned_const_withoutID", "unsigned_const", "constant", YY_NULL
  };

#if YYDEBUG
  const unsigned short int
   mlaskal_parser ::yyrline_[] =
  {
       0,   112,   112,   119,   120,   122,   124,   125,   126,   127,
     128,   129,   130,   131,   133,   135,   136,   138,   139,   141,
     142,   145,   146,   148,   149,   151,   152,   153,   154,   157,
     158,   161,   162,   163,   164,   165,   166,   168,   169,   172,
     173,   176,   177,   178,   179,   182,   183,   186,   187,   188,
     191,   193,   195,   196,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   224,   224,   228,   229,   235,
     236,   238,   240,   241,   245,   246,   249,   250,   251,   254,
     255,   258,   259,   260,   263,   264,   267,   268,   269,   270,
     271,   272,   278,   279,   280,   281,   284,   285,   286,   289,
     290,   291,   292,   296,   297,   298
  };

  // Print the state stack on the debug stream.
  void
   mlaskal_parser ::yystack_print_ ()
  {
    *yycdebug_ << "Stack now";
    for (stack_type::const_iterator
           i = yystack_.begin (),
           i_end = yystack_.end ();
         i != i_end; ++i)
      *yycdebug_ << ' ' << i->state;
    *yycdebug_ << std::endl;
  }

  // Report on the debug stream that the rule \a yyrule is going to be reduced.
  void
   mlaskal_parser ::yy_reduce_print_ (int yyrule)
  {
    unsigned int yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    // Print the symbols being reduced, and their result.
    *yycdebug_ << "Reducing stack by rule " << yyrule - 1
               << " (line " << yylno << "):" << std::endl;
    // The symbols being reduced.
    for (int yyi = 0; yyi < yynrhs; yyi++)
      YY_SYMBOL_PRINT ("   $" << yyi + 1 << " =",
                       yystack_@{(yynrhs) - (yyi + 1)@});
  }
#endif // YYDEBUG



} // yy
#line @oline@ @ofile@ // lalr1.cc:1156
#line 305 "C:\\Users\\Martin\\source\\repos\\PascalTranslater\\mlaskal\\private-src\\du3456g.y" // lalr1.cc:1157



namespace yy {

	void mlaskal_parser::error(const location_type& l, const std::string& m)
	{
		message(DUERR_SYNTAX, l, m);
	}

}

