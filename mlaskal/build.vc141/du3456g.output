Nonterminals useless in grammar

   constant
   unsigned_const


Terminals unused in grammar

   RECORD


Rules useless in grammar

  119 constant: unsigned_const
  120         | OPER_SIGNADD UINT
  121         | OPER_SIGNADD REAL

  122 unsigned_const: UINT
  123               | REAL
  124               | STRING
  125               | IDENTIFIER


Grammar

    0 $accept: mlaskal "end of file"

    1 mlaskal: PROGRAM IDENTIFIER SEMICOLON block_P DOT

    2 block_P: start_block const_block
    3        | const_block

    4 start_block: LABEL C1 SEMICOLON

    5 const_block: CONST C2 type_block
    6            | type_block

    7 type_block: TYPE C3 var_block
    8           | var_block

    9 var_block: VAR C5 procedure_block
   10          | procedure_block

   11 procedure_block: end_block
   12                | C7 end_block

   13 end_block: BEGIN state_cycle END

   14 C1: UINT
   15   | C1 COMMA UINT

   16 C2: IDENTIFIER EQ UINT SEMICOLON
   17   | IDENTIFIER EQ REAL SEMICOLON
   18   | IDENTIFIER EQ STRING SEMICOLON
   19   | IDENTIFIER EQ IDENTIFIER SEMICOLON
   20   | IDENTIFIER EQ OPER_SIGNADD UINT SEMICOLON
   21   | IDENTIFIER EQ OPER_SIGNADD REAL SEMICOLON
   22   | C2 IDENTIFIER EQ UINT SEMICOLON
   23   | C2 IDENTIFIER EQ REAL SEMICOLON
   24   | C2 IDENTIFIER EQ STRING SEMICOLON
   25   | C2 IDENTIFIER EQ IDENTIFIER SEMICOLON
   26   | C2 IDENTIFIER EQ OPER_SIGNADD UINT SEMICOLON
   27   | C2 IDENTIFIER EQ OPER_SIGNADD REAL SEMICOLON
   28   | IDENTIFIER EQ UINT

   29 C3: IDENTIFIER EQ type SEMICOLON
   30   | C3 IDENTIFIER EQ type SEMICOLON

   31 C4: IDENTIFIER
   32   | C4 COMMA IDENTIFIER

   33 C5: C4 COLON type SEMICOLON
   34   | C5 C4 COLON type SEMICOLON

   35 C7: procedure_header SEMICOLON block SEMICOLON
   36   | function_header SEMICOLON block SEMICOLON
   37   | C7 procedure_header SEMICOLON block SEMICOLON
   38   | C7 function_header SEMICOLON block SEMICOLON

   39 block: start_block const_block2
   40      | const_block2

   41 const_block2: CONST C2 type_block2
   42             | type_block2

   43 type_block2: TYPE C3 var_block2
   44            | var_block2

   45 var_block2: VAR C5 end_block
   46           | end_block

   47 procedure_header: PROCEDURE IDENTIFIER
   48                 | PROCEDURE IDENTIFIER LPAR form_par RPAR

   49 function_header: FUNCTION IDENTIFIER COLON IDENTIFIER
   50                | FUNCTION IDENTIFIER LPAR form_par RPAR COLON IDENTIFIER

   51 form_par: VAR id_cycl COLON IDENTIFIER
   52         | id_cycl COLON IDENTIFIER
   53         | form_par SEMICOLON VAR id_cycl COLON IDENTIFIER
   54         | form_par SEMICOLON id_cycl COLON IDENTIFIER

   55 id_cycl: IDENTIFIER
   56        | id_cycl COMMA IDENTIFIER

   57 type: ord_type
   58     | IDENTIFIER
   59     | struc_type

   60 struc_type: ARRAY LSBRA ord_type_cycl RSBRA OF type

   61 ord_type: ord_const DOTDOT ord_const

   62 ord_type_cycl: ord_type
   63              | ord_type_cycl COMMA ord_type

   64 statement: %empty
   65          | D0 variable ASSIGN expression
   66          | D0 IDENTIFIER
   67          | D0 IDENTIFIER LPAR real_par RPAR
   68          | D0 GOTO UINT
   69          | D0 BEGIN state_cycle END
   70          | D0 IF expression THEN statement
   71          | D0 IF expression THEN statement2 ELSE statement
   72          | D0 WHILE expression DO statement
   73          | D0 REPEAT state_cycle UNTIL expression
   74          | D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement

   75 statement2: %empty
   76           | D0 variable ASSIGN expression
   77           | D0 IDENTIFIER
   78           | D0 IDENTIFIER LPAR real_par RPAR
   79           | D0 GOTO UINT
   80           | D0 BEGIN state_cycle END
   81           | D0 IF expression THEN statement2 ELSE statement2
   82           | D0 WHILE expression DO statement2
   83           | D0 REPEAT state_cycle UNTIL expression
   84           | D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement2

   85 D0: UINT COLON
   86   | %empty

   87 state_cycle: statement
   88            | state_cycle SEMICOLON statement

   89 variable: variable LSBRA ord_expr_cylc RSBRA
   90         | IDENTIFIER

   91 variable_withoutID: variable LSBRA ord_expr_cylc RSBRA

   92 ord_expr_cylc: expression
   93              | ord_expr_cylc COMMA expression

   94 real_par: expression
   95         | real_par COMMA expression

   96 expression: simp_expression
   97           | simp_expression OPER_REL simp_expression
   98           | simp_expression EQ simp_expression

   99 simp_expression: OPER_SIGNADD term_oper
  100                | term_oper

  101 term_oper: term_oper OPER_SIGNADD term
  102          | term_oper OR term
  103          | term

  104 term: factor
  105     | term OPER_MUL factor

  106 factor: unsigned_const_withoutID
  107       | variable_withoutID
  108       | IDENTIFIER
  109       | IDENTIFIER LPAR real_par RPAR
  110       | LPAR expression RPAR
  111       | NOT factor

  112 ord_const: IDENTIFIER
  113          | OPER_SIGNADD IDENTIFIER
  114          | OPER_SIGNADD UINT
  115          | UINT

  116 unsigned_const_withoutID: REAL
  117                         | STRING
  118                         | UINT


Terminals, with rules where they appear

"end of file" (0) 0
error (256)
PROGRAM (258) 1
LABEL (259) 4
CONST (260) 5 41
TYPE (261) 7 43
VAR (262) 9 45 51 53
BEGIN (263) 13 69 80
END (264) 13 69 80
PROCEDURE (265) 47 48
FUNCTION (266) 49 50
ARRAY (267) 60
OF (268) 60
GOTO (269) 68 79
IF (270) 70 71 81
THEN (271) 70 71 81
ELSE (272) 71 81
WHILE (273) 72 82
DO (274) 72 74 82 84
REPEAT (275) 73 83
UNTIL (276) 73 83
FOR (277) 74 84
OR (278) 102
NOT (279) 111
RECORD (280)
IDENTIFIER (281) 1 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
    32 47 48 49 50 51 52 53 54 55 56 58 66 67 74 77 78 84 90 108 109
    112 113
UINT (282) 14 15 16 20 22 26 28 68 79 85 114 115 118
REAL (283) 17 21 23 27 116
STRING (284) 18 24 117
SEMICOLON (285) 1 4 16 17 18 19 20 21 22 23 24 25 26 27 29 30 33 34
    35 36 37 38 53 54 88
DOT (286) 1
COMMA (287) 15 32 56 63 93 95
EQ (288) 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 98
COLON (289) 33 34 49 50 51 52 53 54 85
LPAR (290) 48 50 67 78 109 110
RPAR (291) 48 50 67 78 109 110
DOTDOT (292) 61
LSBRA (293) 60 89 91
RSBRA (294) 60 89 91
ASSIGN (295) 65 74 76 84
OPER_REL (296) 97
OPER_SIGNADD (297) 20 21 26 27 99 101 113 114
OPER_MUL (298) 105
FOR_DIRECTION (299) 74 84


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
mlaskal (46)
    on left: 1, on right: 0
block_P (47)
    on left: 2 3, on right: 1
start_block (48)
    on left: 4, on right: 2 39
const_block (49)
    on left: 5 6, on right: 2 3
type_block (50)
    on left: 7 8, on right: 5 6
var_block (51)
    on left: 9 10, on right: 7 8
procedure_block (52)
    on left: 11 12, on right: 9 10
end_block (53)
    on left: 13, on right: 11 12 45 46
C1 (54)
    on left: 14 15, on right: 4 15
C2 (55)
    on left: 16 17 18 19 20 21 22 23 24 25 26 27 28, on right: 5 22
    23 24 25 26 27 41
C3 (56)
    on left: 29 30, on right: 7 30 43
C4 (57)
    on left: 31 32, on right: 32 33 34
C5 (58)
    on left: 33 34, on right: 9 34 45
C7 (59)
    on left: 35 36 37 38, on right: 12 37 38
block (60)
    on left: 39 40, on right: 35 36 37 38
const_block2 (61)
    on left: 41 42, on right: 39 40
type_block2 (62)
    on left: 43 44, on right: 41 42
var_block2 (63)
    on left: 45 46, on right: 43 44
procedure_header (64)
    on left: 47 48, on right: 35 37
function_header (65)
    on left: 49 50, on right: 36 38
form_par (66)
    on left: 51 52 53 54, on right: 48 50 53 54
id_cycl (67)
    on left: 55 56, on right: 51 52 53 54 56
type (68)
    on left: 57 58 59, on right: 29 30 33 34 60
struc_type (69)
    on left: 60, on right: 59
ord_type (70)
    on left: 61, on right: 57 62 63
ord_type_cycl (71)
    on left: 62 63, on right: 60 63
statement (72)
    on left: 64 65 66 67 68 69 70 71 72 73 74, on right: 70 71 72 74
    87 88
statement2 (73)
    on left: 75 76 77 78 79 80 81 82 83 84, on right: 71 81 82 84
D0 (74)
    on left: 85 86, on right: 65 66 67 68 69 70 71 72 73 74 76 77 78
    79 80 81 82 83 84
state_cycle (75)
    on left: 87 88, on right: 13 69 73 80 83 88
variable (76)
    on left: 89 90, on right: 65 76 89 91
variable_withoutID (77)
    on left: 91, on right: 107
ord_expr_cylc (78)
    on left: 92 93, on right: 89 91 93
real_par (79)
    on left: 94 95, on right: 67 78 95 109
expression (80)
    on left: 96 97 98, on right: 65 70 71 72 73 74 76 81 82 83 84 92
    93 94 95 110
simp_expression (81)
    on left: 99 100, on right: 96 97 98
term_oper (82)
    on left: 101 102 103, on right: 99 100 101 102
term (83)
    on left: 104 105, on right: 101 102 103 105
factor (84)
    on left: 106 107 108 109 110 111, on right: 104 105 111
ord_const (85)
    on left: 112 113 114 115, on right: 61
unsigned_const_withoutID (86)
    on left: 116 117 118, on right: 106


State 0

    0 $accept: . mlaskal "end of file"
    1 mlaskal: . PROGRAM IDENTIFIER SEMICOLON block_P DOT

    PROGRAM  shift, and go to state 1

    mlaskal  go to state 2


State 1

    1 mlaskal: PROGRAM . IDENTIFIER SEMICOLON block_P DOT

    IDENTIFIER  shift, and go to state 3


State 2

    0 $accept: mlaskal . "end of file"

    "end of file"  shift, and go to state 4


State 3

    1 mlaskal: PROGRAM IDENTIFIER . SEMICOLON block_P DOT

    SEMICOLON  shift, and go to state 5


State 4

    0 $accept: mlaskal "end of file" .

    $default  accept


State 5

    1 mlaskal: PROGRAM IDENTIFIER SEMICOLON . block_P DOT
    2 block_P: . start_block const_block
    3        | . const_block
    4 start_block: . LABEL C1 SEMICOLON
    5 const_block: . CONST C2 type_block
    6            | . type_block
    7 type_block: . TYPE C3 var_block
    8           | . var_block
    9 var_block: . VAR C5 procedure_block
   10          | . procedure_block
   11 procedure_block: . end_block
   12                | . C7 end_block
   13 end_block: . BEGIN state_cycle END
   35 C7: . procedure_header SEMICOLON block SEMICOLON
   36   | . function_header SEMICOLON block SEMICOLON
   37   | . C7 procedure_header SEMICOLON block SEMICOLON
   38   | . C7 function_header SEMICOLON block SEMICOLON
   47 procedure_header: . PROCEDURE IDENTIFIER
   48                 | . PROCEDURE IDENTIFIER LPAR form_par RPAR
   49 function_header: . FUNCTION IDENTIFIER COLON IDENTIFIER
   50                | . FUNCTION IDENTIFIER LPAR form_par RPAR COLON IDENTIFIER

    LABEL      shift, and go to state 6
    CONST      shift, and go to state 7
    TYPE       shift, and go to state 8
    VAR        shift, and go to state 9
    BEGIN      shift, and go to state 10
    PROCEDURE  shift, and go to state 11
    FUNCTION   shift, and go to state 12

    block_P           go to state 13
    start_block       go to state 14
    const_block       go to state 15
    type_block        go to state 16
    var_block         go to state 17
    procedure_block   go to state 18
    end_block         go to state 19
    C7                go to state 20
    procedure_header  go to state 21
    function_header   go to state 22


State 6

    4 start_block: LABEL . C1 SEMICOLON
   14 C1: . UINT
   15   | . C1 COMMA UINT

    UINT  shift, and go to state 23

    C1  go to state 24


State 7

    5 const_block: CONST . C2 type_block
   16 C2: . IDENTIFIER EQ UINT SEMICOLON
   17   | . IDENTIFIER EQ REAL SEMICOLON
   18   | . IDENTIFIER EQ STRING SEMICOLON
   19   | . IDENTIFIER EQ IDENTIFIER SEMICOLON
   20   | . IDENTIFIER EQ OPER_SIGNADD UINT SEMICOLON
   21   | . IDENTIFIER EQ OPER_SIGNADD REAL SEMICOLON
   22   | . C2 IDENTIFIER EQ UINT SEMICOLON
   23   | . C2 IDENTIFIER EQ REAL SEMICOLON
   24   | . C2 IDENTIFIER EQ STRING SEMICOLON
   25   | . C2 IDENTIFIER EQ IDENTIFIER SEMICOLON
   26   | . C2 IDENTIFIER EQ OPER_SIGNADD UINT SEMICOLON
   27   | . C2 IDENTIFIER EQ OPER_SIGNADD REAL SEMICOLON
   28   | . IDENTIFIER EQ UINT

    IDENTIFIER  shift, and go to state 25

    C2  go to state 26


State 8

    7 type_block: TYPE . C3 var_block
   29 C3: . IDENTIFIER EQ type SEMICOLON
   30   | . C3 IDENTIFIER EQ type SEMICOLON

    IDENTIFIER  shift, and go to state 27

    C3  go to state 28


State 9

    9 var_block: VAR . C5 procedure_block
   31 C4: . IDENTIFIER
   32   | . C4 COMMA IDENTIFIER
   33 C5: . C4 COLON type SEMICOLON
   34   | . C5 C4 COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 29

    C4  go to state 30
    C5  go to state 31


State 10

   13 end_block: BEGIN . state_cycle END
   64 statement: . %empty  [END, SEMICOLON]
   65          | . D0 variable ASSIGN expression
   66          | . D0 IDENTIFIER
   67          | . D0 IDENTIFIER LPAR real_par RPAR
   68          | . D0 GOTO UINT
   69          | . D0 BEGIN state_cycle END
   70          | . D0 IF expression THEN statement
   71          | . D0 IF expression THEN statement2 ELSE statement
   72          | . D0 WHILE expression DO statement
   73          | . D0 REPEAT state_cycle UNTIL expression
   74          | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement
   85 D0: . UINT COLON
   86   | . %empty  [BEGIN, GOTO, IF, WHILE, REPEAT, FOR, IDENTIFIER]
   87 state_cycle: . statement
   88            | . state_cycle SEMICOLON statement

    UINT  shift, and go to state 32

    END        reduce using rule 64 (statement)
    SEMICOLON  reduce using rule 64 (statement)
    $default   reduce using rule 86 (D0)

    statement    go to state 33
    D0           go to state 34
    state_cycle  go to state 35


State 11

   47 procedure_header: PROCEDURE . IDENTIFIER
   48                 | PROCEDURE . IDENTIFIER LPAR form_par RPAR

    IDENTIFIER  shift, and go to state 36


State 12

   49 function_header: FUNCTION . IDENTIFIER COLON IDENTIFIER
   50                | FUNCTION . IDENTIFIER LPAR form_par RPAR COLON IDENTIFIER

    IDENTIFIER  shift, and go to state 37


State 13

    1 mlaskal: PROGRAM IDENTIFIER SEMICOLON block_P . DOT

    DOT  shift, and go to state 38


State 14

    2 block_P: start_block . const_block
    5 const_block: . CONST C2 type_block
    6            | . type_block
    7 type_block: . TYPE C3 var_block
    8           | . var_block
    9 var_block: . VAR C5 procedure_block
   10          | . procedure_block
   11 procedure_block: . end_block
   12                | . C7 end_block
   13 end_block: . BEGIN state_cycle END
   35 C7: . procedure_header SEMICOLON block SEMICOLON
   36   | . function_header SEMICOLON block SEMICOLON
   37   | . C7 procedure_header SEMICOLON block SEMICOLON
   38   | . C7 function_header SEMICOLON block SEMICOLON
   47 procedure_header: . PROCEDURE IDENTIFIER
   48                 | . PROCEDURE IDENTIFIER LPAR form_par RPAR
   49 function_header: . FUNCTION IDENTIFIER COLON IDENTIFIER
   50                | . FUNCTION IDENTIFIER LPAR form_par RPAR COLON IDENTIFIER

    CONST      shift, and go to state 7
    TYPE       shift, and go to state 8
    VAR        shift, and go to state 9
    BEGIN      shift, and go to state 10
    PROCEDURE  shift, and go to state 11
    FUNCTION   shift, and go to state 12

    const_block       go to state 39
    type_block        go to state 16
    var_block         go to state 17
    procedure_block   go to state 18
    end_block         go to state 19
    C7                go to state 20
    procedure_header  go to state 21
    function_header   go to state 22


State 15

    3 block_P: const_block .

    $default  reduce using rule 3 (block_P)


State 16

    6 const_block: type_block .

    $default  reduce using rule 6 (const_block)


State 17

    8 type_block: var_block .

    $default  reduce using rule 8 (type_block)


State 18

   10 var_block: procedure_block .

    $default  reduce using rule 10 (var_block)


State 19

   11 procedure_block: end_block .

    $default  reduce using rule 11 (procedure_block)


State 20

   12 procedure_block: C7 . end_block
   13 end_block: . BEGIN state_cycle END
   37 C7: C7 . procedure_header SEMICOLON block SEMICOLON
   38   | C7 . function_header SEMICOLON block SEMICOLON
   47 procedure_header: . PROCEDURE IDENTIFIER
   48                 | . PROCEDURE IDENTIFIER LPAR form_par RPAR
   49 function_header: . FUNCTION IDENTIFIER COLON IDENTIFIER
   50                | . FUNCTION IDENTIFIER LPAR form_par RPAR COLON IDENTIFIER

    BEGIN      shift, and go to state 10
    PROCEDURE  shift, and go to state 11
    FUNCTION   shift, and go to state 12

    end_block         go to state 40
    procedure_header  go to state 41
    function_header   go to state 42


State 21

   35 C7: procedure_header . SEMICOLON block SEMICOLON

    SEMICOLON  shift, and go to state 43


State 22

   36 C7: function_header . SEMICOLON block SEMICOLON

    SEMICOLON  shift, and go to state 44


State 23

   14 C1: UINT .

    $default  reduce using rule 14 (C1)


State 24

    4 start_block: LABEL C1 . SEMICOLON
   15 C1: C1 . COMMA UINT

    SEMICOLON  shift, and go to state 45
    COMMA      shift, and go to state 46


State 25

   16 C2: IDENTIFIER . EQ UINT SEMICOLON
   17   | IDENTIFIER . EQ REAL SEMICOLON
   18   | IDENTIFIER . EQ STRING SEMICOLON
   19   | IDENTIFIER . EQ IDENTIFIER SEMICOLON
   20   | IDENTIFIER . EQ OPER_SIGNADD UINT SEMICOLON
   21   | IDENTIFIER . EQ OPER_SIGNADD REAL SEMICOLON
   28   | IDENTIFIER . EQ UINT

    EQ  shift, and go to state 47


State 26

    5 const_block: CONST C2 . type_block
    7 type_block: . TYPE C3 var_block
    8           | . var_block
    9 var_block: . VAR C5 procedure_block
   10          | . procedure_block
   11 procedure_block: . end_block
   12                | . C7 end_block
   13 end_block: . BEGIN state_cycle END
   22 C2: C2 . IDENTIFIER EQ UINT SEMICOLON
   23   | C2 . IDENTIFIER EQ REAL SEMICOLON
   24   | C2 . IDENTIFIER EQ STRING SEMICOLON
   25   | C2 . IDENTIFIER EQ IDENTIFIER SEMICOLON
   26   | C2 . IDENTIFIER EQ OPER_SIGNADD UINT SEMICOLON
   27   | C2 . IDENTIFIER EQ OPER_SIGNADD REAL SEMICOLON
   35 C7: . procedure_header SEMICOLON block SEMICOLON
   36   | . function_header SEMICOLON block SEMICOLON
   37   | . C7 procedure_header SEMICOLON block SEMICOLON
   38   | . C7 function_header SEMICOLON block SEMICOLON
   47 procedure_header: . PROCEDURE IDENTIFIER
   48                 | . PROCEDURE IDENTIFIER LPAR form_par RPAR
   49 function_header: . FUNCTION IDENTIFIER COLON IDENTIFIER
   50                | . FUNCTION IDENTIFIER LPAR form_par RPAR COLON IDENTIFIER

    TYPE        shift, and go to state 8
    VAR         shift, and go to state 9
    BEGIN       shift, and go to state 10
    PROCEDURE   shift, and go to state 11
    FUNCTION    shift, and go to state 12
    IDENTIFIER  shift, and go to state 48

    type_block        go to state 49
    var_block         go to state 17
    procedure_block   go to state 18
    end_block         go to state 19
    C7                go to state 20
    procedure_header  go to state 21
    function_header   go to state 22


State 27

   29 C3: IDENTIFIER . EQ type SEMICOLON

    EQ  shift, and go to state 50


State 28

    7 type_block: TYPE C3 . var_block
    9 var_block: . VAR C5 procedure_block
   10          | . procedure_block
   11 procedure_block: . end_block
   12                | . C7 end_block
   13 end_block: . BEGIN state_cycle END
   30 C3: C3 . IDENTIFIER EQ type SEMICOLON
   35 C7: . procedure_header SEMICOLON block SEMICOLON
   36   | . function_header SEMICOLON block SEMICOLON
   37   | . C7 procedure_header SEMICOLON block SEMICOLON
   38   | . C7 function_header SEMICOLON block SEMICOLON
   47 procedure_header: . PROCEDURE IDENTIFIER
   48                 | . PROCEDURE IDENTIFIER LPAR form_par RPAR
   49 function_header: . FUNCTION IDENTIFIER COLON IDENTIFIER
   50                | . FUNCTION IDENTIFIER LPAR form_par RPAR COLON IDENTIFIER

    VAR         shift, and go to state 9
    BEGIN       shift, and go to state 10
    PROCEDURE   shift, and go to state 11
    FUNCTION    shift, and go to state 12
    IDENTIFIER  shift, and go to state 51

    var_block         go to state 52
    procedure_block   go to state 18
    end_block         go to state 19
    C7                go to state 20
    procedure_header  go to state 21
    function_header   go to state 22


State 29

   31 C4: IDENTIFIER .

    $default  reduce using rule 31 (C4)


State 30

   32 C4: C4 . COMMA IDENTIFIER
   33 C5: C4 . COLON type SEMICOLON

    COMMA  shift, and go to state 53
    COLON  shift, and go to state 54


State 31

    9 var_block: VAR C5 . procedure_block
   11 procedure_block: . end_block
   12                | . C7 end_block
   13 end_block: . BEGIN state_cycle END
   31 C4: . IDENTIFIER
   32   | . C4 COMMA IDENTIFIER
   34 C5: C5 . C4 COLON type SEMICOLON
   35 C7: . procedure_header SEMICOLON block SEMICOLON
   36   | . function_header SEMICOLON block SEMICOLON
   37   | . C7 procedure_header SEMICOLON block SEMICOLON
   38   | . C7 function_header SEMICOLON block SEMICOLON
   47 procedure_header: . PROCEDURE IDENTIFIER
   48                 | . PROCEDURE IDENTIFIER LPAR form_par RPAR
   49 function_header: . FUNCTION IDENTIFIER COLON IDENTIFIER
   50                | . FUNCTION IDENTIFIER LPAR form_par RPAR COLON IDENTIFIER

    BEGIN       shift, and go to state 10
    PROCEDURE   shift, and go to state 11
    FUNCTION    shift, and go to state 12
    IDENTIFIER  shift, and go to state 29

    procedure_block   go to state 55
    end_block         go to state 19
    C4                go to state 56
    C7                go to state 20
    procedure_header  go to state 21
    function_header   go to state 22


State 32

   85 D0: UINT . COLON

    COLON  shift, and go to state 57


State 33

   87 state_cycle: statement .

    $default  reduce using rule 87 (state_cycle)


State 34

   65 statement: D0 . variable ASSIGN expression
   66          | D0 . IDENTIFIER
   67          | D0 . IDENTIFIER LPAR real_par RPAR
   68          | D0 . GOTO UINT
   69          | D0 . BEGIN state_cycle END
   70          | D0 . IF expression THEN statement
   71          | D0 . IF expression THEN statement2 ELSE statement
   72          | D0 . WHILE expression DO statement
   73          | D0 . REPEAT state_cycle UNTIL expression
   74          | D0 . FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement
   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER

    BEGIN       shift, and go to state 58
    GOTO        shift, and go to state 59
    IF          shift, and go to state 60
    WHILE       shift, and go to state 61
    REPEAT      shift, and go to state 62
    FOR         shift, and go to state 63
    IDENTIFIER  shift, and go to state 64

    variable  go to state 65


State 35

   13 end_block: BEGIN state_cycle . END
   88 state_cycle: state_cycle . SEMICOLON statement

    END        shift, and go to state 66
    SEMICOLON  shift, and go to state 67


State 36

   47 procedure_header: PROCEDURE IDENTIFIER .  [SEMICOLON]
   48                 | PROCEDURE IDENTIFIER . LPAR form_par RPAR

    LPAR  shift, and go to state 68

    $default  reduce using rule 47 (procedure_header)


State 37

   49 function_header: FUNCTION IDENTIFIER . COLON IDENTIFIER
   50                | FUNCTION IDENTIFIER . LPAR form_par RPAR COLON IDENTIFIER

    COLON  shift, and go to state 69
    LPAR   shift, and go to state 70


State 38

    1 mlaskal: PROGRAM IDENTIFIER SEMICOLON block_P DOT .

    $default  reduce using rule 1 (mlaskal)


State 39

    2 block_P: start_block const_block .

    $default  reduce using rule 2 (block_P)


State 40

   12 procedure_block: C7 end_block .

    $default  reduce using rule 12 (procedure_block)


State 41

   37 C7: C7 procedure_header . SEMICOLON block SEMICOLON

    SEMICOLON  shift, and go to state 71


State 42

   38 C7: C7 function_header . SEMICOLON block SEMICOLON

    SEMICOLON  shift, and go to state 72


State 43

    4 start_block: . LABEL C1 SEMICOLON
   13 end_block: . BEGIN state_cycle END
   35 C7: procedure_header SEMICOLON . block SEMICOLON
   39 block: . start_block const_block2
   40      | . const_block2
   41 const_block2: . CONST C2 type_block2
   42             | . type_block2
   43 type_block2: . TYPE C3 var_block2
   44            | . var_block2
   45 var_block2: . VAR C5 end_block
   46           | . end_block

    LABEL  shift, and go to state 6
    CONST  shift, and go to state 73
    TYPE   shift, and go to state 74
    VAR    shift, and go to state 75
    BEGIN  shift, and go to state 10

    start_block   go to state 76
    end_block     go to state 77
    block         go to state 78
    const_block2  go to state 79
    type_block2   go to state 80
    var_block2    go to state 81


State 44

    4 start_block: . LABEL C1 SEMICOLON
   13 end_block: . BEGIN state_cycle END
   36 C7: function_header SEMICOLON . block SEMICOLON
   39 block: . start_block const_block2
   40      | . const_block2
   41 const_block2: . CONST C2 type_block2
   42             | . type_block2
   43 type_block2: . TYPE C3 var_block2
   44            | . var_block2
   45 var_block2: . VAR C5 end_block
   46           | . end_block

    LABEL  shift, and go to state 6
    CONST  shift, and go to state 73
    TYPE   shift, and go to state 74
    VAR    shift, and go to state 75
    BEGIN  shift, and go to state 10

    start_block   go to state 76
    end_block     go to state 77
    block         go to state 82
    const_block2  go to state 79
    type_block2   go to state 80
    var_block2    go to state 81


State 45

    4 start_block: LABEL C1 SEMICOLON .

    $default  reduce using rule 4 (start_block)


State 46

   15 C1: C1 COMMA . UINT

    UINT  shift, and go to state 83


State 47

   16 C2: IDENTIFIER EQ . UINT SEMICOLON
   17   | IDENTIFIER EQ . REAL SEMICOLON
   18   | IDENTIFIER EQ . STRING SEMICOLON
   19   | IDENTIFIER EQ . IDENTIFIER SEMICOLON
   20   | IDENTIFIER EQ . OPER_SIGNADD UINT SEMICOLON
   21   | IDENTIFIER EQ . OPER_SIGNADD REAL SEMICOLON
   28   | IDENTIFIER EQ . UINT

    IDENTIFIER    shift, and go to state 84
    UINT          shift, and go to state 85
    REAL          shift, and go to state 86
    STRING        shift, and go to state 87
    OPER_SIGNADD  shift, and go to state 88


State 48

   22 C2: C2 IDENTIFIER . EQ UINT SEMICOLON
   23   | C2 IDENTIFIER . EQ REAL SEMICOLON
   24   | C2 IDENTIFIER . EQ STRING SEMICOLON
   25   | C2 IDENTIFIER . EQ IDENTIFIER SEMICOLON
   26   | C2 IDENTIFIER . EQ OPER_SIGNADD UINT SEMICOLON
   27   | C2 IDENTIFIER . EQ OPER_SIGNADD REAL SEMICOLON

    EQ  shift, and go to state 89


State 49

    5 const_block: CONST C2 type_block .

    $default  reduce using rule 5 (const_block)


State 50

   29 C3: IDENTIFIER EQ . type SEMICOLON
   57 type: . ord_type
   58     | . IDENTIFIER
   59     | . struc_type
   60 struc_type: . ARRAY LSBRA ord_type_cycl RSBRA OF type
   61 ord_type: . ord_const DOTDOT ord_const
  112 ord_const: . IDENTIFIER
  113          | . OPER_SIGNADD IDENTIFIER
  114          | . OPER_SIGNADD UINT
  115          | . UINT

    ARRAY         shift, and go to state 90
    IDENTIFIER    shift, and go to state 91
    UINT          shift, and go to state 92
    OPER_SIGNADD  shift, and go to state 93

    type        go to state 94
    struc_type  go to state 95
    ord_type    go to state 96
    ord_const   go to state 97


State 51

   30 C3: C3 IDENTIFIER . EQ type SEMICOLON

    EQ  shift, and go to state 98


State 52

    7 type_block: TYPE C3 var_block .

    $default  reduce using rule 7 (type_block)


State 53

   32 C4: C4 COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 99


State 54

   33 C5: C4 COLON . type SEMICOLON
   57 type: . ord_type
   58     | . IDENTIFIER
   59     | . struc_type
   60 struc_type: . ARRAY LSBRA ord_type_cycl RSBRA OF type
   61 ord_type: . ord_const DOTDOT ord_const
  112 ord_const: . IDENTIFIER
  113          | . OPER_SIGNADD IDENTIFIER
  114          | . OPER_SIGNADD UINT
  115          | . UINT

    ARRAY         shift, and go to state 90
    IDENTIFIER    shift, and go to state 91
    UINT          shift, and go to state 92
    OPER_SIGNADD  shift, and go to state 93

    type        go to state 100
    struc_type  go to state 95
    ord_type    go to state 96
    ord_const   go to state 97


State 55

    9 var_block: VAR C5 procedure_block .

    $default  reduce using rule 9 (var_block)


State 56

   32 C4: C4 . COMMA IDENTIFIER
   34 C5: C5 C4 . COLON type SEMICOLON

    COMMA  shift, and go to state 53
    COLON  shift, and go to state 101


State 57

   85 D0: UINT COLON .

    $default  reduce using rule 85 (D0)


State 58

   64 statement: . %empty  [END, SEMICOLON]
   65          | . D0 variable ASSIGN expression
   66          | . D0 IDENTIFIER
   67          | . D0 IDENTIFIER LPAR real_par RPAR
   68          | . D0 GOTO UINT
   69          | . D0 BEGIN state_cycle END
   69          | D0 BEGIN . state_cycle END
   70          | . D0 IF expression THEN statement
   71          | . D0 IF expression THEN statement2 ELSE statement
   72          | . D0 WHILE expression DO statement
   73          | . D0 REPEAT state_cycle UNTIL expression
   74          | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement
   85 D0: . UINT COLON
   86   | . %empty  [BEGIN, GOTO, IF, WHILE, REPEAT, FOR, IDENTIFIER]
   87 state_cycle: . statement
   88            | . state_cycle SEMICOLON statement

    UINT  shift, and go to state 32

    END        reduce using rule 64 (statement)
    SEMICOLON  reduce using rule 64 (statement)
    $default   reduce using rule 86 (D0)

    statement    go to state 33
    D0           go to state 34
    state_cycle  go to state 102


State 59

   68 statement: D0 GOTO . UINT

    UINT  shift, and go to state 103


State 60

   70 statement: D0 IF . expression THEN statement
   71          | D0 IF . expression THEN statement2 ELSE statement
   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    expression                go to state 113
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 61

   72 statement: D0 WHILE . expression DO statement
   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    expression                go to state 119
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 62

   64 statement: . %empty  [UNTIL, SEMICOLON]
   65          | . D0 variable ASSIGN expression
   66          | . D0 IDENTIFIER
   67          | . D0 IDENTIFIER LPAR real_par RPAR
   68          | . D0 GOTO UINT
   69          | . D0 BEGIN state_cycle END
   70          | . D0 IF expression THEN statement
   71          | . D0 IF expression THEN statement2 ELSE statement
   72          | . D0 WHILE expression DO statement
   73          | . D0 REPEAT state_cycle UNTIL expression
   73          | D0 REPEAT . state_cycle UNTIL expression
   74          | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement
   85 D0: . UINT COLON
   86   | . %empty  [BEGIN, GOTO, IF, WHILE, REPEAT, FOR, IDENTIFIER]
   87 state_cycle: . statement
   88            | . state_cycle SEMICOLON statement

    UINT  shift, and go to state 32

    UNTIL      reduce using rule 64 (statement)
    SEMICOLON  reduce using rule 64 (statement)
    $default   reduce using rule 86 (D0)

    statement    go to state 33
    D0           go to state 34
    state_cycle  go to state 120


State 63

   74 statement: D0 FOR . IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement

    IDENTIFIER  shift, and go to state 121


State 64

   66 statement: D0 IDENTIFIER .  [END, UNTIL, SEMICOLON]
   67          | D0 IDENTIFIER . LPAR real_par RPAR
   90 variable: IDENTIFIER .  [LSBRA, ASSIGN]

    LPAR  shift, and go to state 122

    LSBRA     reduce using rule 90 (variable)
    ASSIGN    reduce using rule 90 (variable)
    $default  reduce using rule 66 (statement)


State 65

   65 statement: D0 variable . ASSIGN expression
   89 variable: variable . LSBRA ord_expr_cylc RSBRA

    LSBRA   shift, and go to state 123
    ASSIGN  shift, and go to state 124


State 66

   13 end_block: BEGIN state_cycle END .

    $default  reduce using rule 13 (end_block)


State 67

   64 statement: . %empty  [END, UNTIL, SEMICOLON]
   65          | . D0 variable ASSIGN expression
   66          | . D0 IDENTIFIER
   67          | . D0 IDENTIFIER LPAR real_par RPAR
   68          | . D0 GOTO UINT
   69          | . D0 BEGIN state_cycle END
   70          | . D0 IF expression THEN statement
   71          | . D0 IF expression THEN statement2 ELSE statement
   72          | . D0 WHILE expression DO statement
   73          | . D0 REPEAT state_cycle UNTIL expression
   74          | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement
   85 D0: . UINT COLON
   86   | . %empty  [BEGIN, GOTO, IF, WHILE, REPEAT, FOR, IDENTIFIER]
   88 state_cycle: state_cycle SEMICOLON . statement

    UINT  shift, and go to state 32

    END        reduce using rule 64 (statement)
    UNTIL      reduce using rule 64 (statement)
    SEMICOLON  reduce using rule 64 (statement)
    $default   reduce using rule 86 (D0)

    statement  go to state 125
    D0         go to state 34


State 68

   48 procedure_header: PROCEDURE IDENTIFIER LPAR . form_par RPAR
   51 form_par: . VAR id_cycl COLON IDENTIFIER
   52         | . id_cycl COLON IDENTIFIER
   53         | . form_par SEMICOLON VAR id_cycl COLON IDENTIFIER
   54         | . form_par SEMICOLON id_cycl COLON IDENTIFIER
   55 id_cycl: . IDENTIFIER
   56        | . id_cycl COMMA IDENTIFIER

    VAR         shift, and go to state 126
    IDENTIFIER  shift, and go to state 127

    form_par  go to state 128
    id_cycl   go to state 129


State 69

   49 function_header: FUNCTION IDENTIFIER COLON . IDENTIFIER

    IDENTIFIER  shift, and go to state 130


State 70

   50 function_header: FUNCTION IDENTIFIER LPAR . form_par RPAR COLON IDENTIFIER
   51 form_par: . VAR id_cycl COLON IDENTIFIER
   52         | . id_cycl COLON IDENTIFIER
   53         | . form_par SEMICOLON VAR id_cycl COLON IDENTIFIER
   54         | . form_par SEMICOLON id_cycl COLON IDENTIFIER
   55 id_cycl: . IDENTIFIER
   56        | . id_cycl COMMA IDENTIFIER

    VAR         shift, and go to state 126
    IDENTIFIER  shift, and go to state 127

    form_par  go to state 131
    id_cycl   go to state 129


State 71

    4 start_block: . LABEL C1 SEMICOLON
   13 end_block: . BEGIN state_cycle END
   37 C7: C7 procedure_header SEMICOLON . block SEMICOLON
   39 block: . start_block const_block2
   40      | . const_block2
   41 const_block2: . CONST C2 type_block2
   42             | . type_block2
   43 type_block2: . TYPE C3 var_block2
   44            | . var_block2
   45 var_block2: . VAR C5 end_block
   46           | . end_block

    LABEL  shift, and go to state 6
    CONST  shift, and go to state 73
    TYPE   shift, and go to state 74
    VAR    shift, and go to state 75
    BEGIN  shift, and go to state 10

    start_block   go to state 76
    end_block     go to state 77
    block         go to state 132
    const_block2  go to state 79
    type_block2   go to state 80
    var_block2    go to state 81


State 72

    4 start_block: . LABEL C1 SEMICOLON
   13 end_block: . BEGIN state_cycle END
   38 C7: C7 function_header SEMICOLON . block SEMICOLON
   39 block: . start_block const_block2
   40      | . const_block2
   41 const_block2: . CONST C2 type_block2
   42             | . type_block2
   43 type_block2: . TYPE C3 var_block2
   44            | . var_block2
   45 var_block2: . VAR C5 end_block
   46           | . end_block

    LABEL  shift, and go to state 6
    CONST  shift, and go to state 73
    TYPE   shift, and go to state 74
    VAR    shift, and go to state 75
    BEGIN  shift, and go to state 10

    start_block   go to state 76
    end_block     go to state 77
    block         go to state 133
    const_block2  go to state 79
    type_block2   go to state 80
    var_block2    go to state 81


State 73

   16 C2: . IDENTIFIER EQ UINT SEMICOLON
   17   | . IDENTIFIER EQ REAL SEMICOLON
   18   | . IDENTIFIER EQ STRING SEMICOLON
   19   | . IDENTIFIER EQ IDENTIFIER SEMICOLON
   20   | . IDENTIFIER EQ OPER_SIGNADD UINT SEMICOLON
   21   | . IDENTIFIER EQ OPER_SIGNADD REAL SEMICOLON
   22   | . C2 IDENTIFIER EQ UINT SEMICOLON
   23   | . C2 IDENTIFIER EQ REAL SEMICOLON
   24   | . C2 IDENTIFIER EQ STRING SEMICOLON
   25   | . C2 IDENTIFIER EQ IDENTIFIER SEMICOLON
   26   | . C2 IDENTIFIER EQ OPER_SIGNADD UINT SEMICOLON
   27   | . C2 IDENTIFIER EQ OPER_SIGNADD REAL SEMICOLON
   28   | . IDENTIFIER EQ UINT
   41 const_block2: CONST . C2 type_block2

    IDENTIFIER  shift, and go to state 25

    C2  go to state 134


State 74

   29 C3: . IDENTIFIER EQ type SEMICOLON
   30   | . C3 IDENTIFIER EQ type SEMICOLON
   43 type_block2: TYPE . C3 var_block2

    IDENTIFIER  shift, and go to state 27

    C3  go to state 135


State 75

   31 C4: . IDENTIFIER
   32   | . C4 COMMA IDENTIFIER
   33 C5: . C4 COLON type SEMICOLON
   34   | . C5 C4 COLON type SEMICOLON
   45 var_block2: VAR . C5 end_block

    IDENTIFIER  shift, and go to state 29

    C4  go to state 30
    C5  go to state 136


State 76

   13 end_block: . BEGIN state_cycle END
   39 block: start_block . const_block2
   41 const_block2: . CONST C2 type_block2
   42             | . type_block2
   43 type_block2: . TYPE C3 var_block2
   44            | . var_block2
   45 var_block2: . VAR C5 end_block
   46           | . end_block

    CONST  shift, and go to state 73
    TYPE   shift, and go to state 74
    VAR    shift, and go to state 75
    BEGIN  shift, and go to state 10

    end_block     go to state 77
    const_block2  go to state 137
    type_block2   go to state 80
    var_block2    go to state 81


State 77

   46 var_block2: end_block .

    $default  reduce using rule 46 (var_block2)


State 78

   35 C7: procedure_header SEMICOLON block . SEMICOLON

    SEMICOLON  shift, and go to state 138


State 79

   40 block: const_block2 .

    $default  reduce using rule 40 (block)


State 80

   42 const_block2: type_block2 .

    $default  reduce using rule 42 (const_block2)


State 81

   44 type_block2: var_block2 .

    $default  reduce using rule 44 (type_block2)


State 82

   36 C7: function_header SEMICOLON block . SEMICOLON

    SEMICOLON  shift, and go to state 139


State 83

   15 C1: C1 COMMA UINT .

    $default  reduce using rule 15 (C1)


State 84

   19 C2: IDENTIFIER EQ IDENTIFIER . SEMICOLON

    SEMICOLON  shift, and go to state 140


State 85

   16 C2: IDENTIFIER EQ UINT . SEMICOLON
   28   | IDENTIFIER EQ UINT .  [TYPE, VAR, BEGIN, PROCEDURE, FUNCTION, IDENTIFIER]

    SEMICOLON  shift, and go to state 141

    $default  reduce using rule 28 (C2)


State 86

   17 C2: IDENTIFIER EQ REAL . SEMICOLON

    SEMICOLON  shift, and go to state 142


State 87

   18 C2: IDENTIFIER EQ STRING . SEMICOLON

    SEMICOLON  shift, and go to state 143


State 88

   20 C2: IDENTIFIER EQ OPER_SIGNADD . UINT SEMICOLON
   21   | IDENTIFIER EQ OPER_SIGNADD . REAL SEMICOLON

    UINT  shift, and go to state 144
    REAL  shift, and go to state 145


State 89

   22 C2: C2 IDENTIFIER EQ . UINT SEMICOLON
   23   | C2 IDENTIFIER EQ . REAL SEMICOLON
   24   | C2 IDENTIFIER EQ . STRING SEMICOLON
   25   | C2 IDENTIFIER EQ . IDENTIFIER SEMICOLON
   26   | C2 IDENTIFIER EQ . OPER_SIGNADD UINT SEMICOLON
   27   | C2 IDENTIFIER EQ . OPER_SIGNADD REAL SEMICOLON

    IDENTIFIER    shift, and go to state 146
    UINT          shift, and go to state 147
    REAL          shift, and go to state 148
    STRING        shift, and go to state 149
    OPER_SIGNADD  shift, and go to state 150


State 90

   60 struc_type: ARRAY . LSBRA ord_type_cycl RSBRA OF type

    LSBRA  shift, and go to state 151


State 91

   58 type: IDENTIFIER .  [SEMICOLON]
  112 ord_const: IDENTIFIER .  [DOTDOT]

    DOTDOT    reduce using rule 112 (ord_const)
    $default  reduce using rule 58 (type)


State 92

  115 ord_const: UINT .

    $default  reduce using rule 115 (ord_const)


State 93

  113 ord_const: OPER_SIGNADD . IDENTIFIER
  114          | OPER_SIGNADD . UINT

    IDENTIFIER  shift, and go to state 152
    UINT        shift, and go to state 153


State 94

   29 C3: IDENTIFIER EQ type . SEMICOLON

    SEMICOLON  shift, and go to state 154


State 95

   59 type: struc_type .

    $default  reduce using rule 59 (type)


State 96

   57 type: ord_type .

    $default  reduce using rule 57 (type)


State 97

   61 ord_type: ord_const . DOTDOT ord_const

    DOTDOT  shift, and go to state 155


State 98

   30 C3: C3 IDENTIFIER EQ . type SEMICOLON
   57 type: . ord_type
   58     | . IDENTIFIER
   59     | . struc_type
   60 struc_type: . ARRAY LSBRA ord_type_cycl RSBRA OF type
   61 ord_type: . ord_const DOTDOT ord_const
  112 ord_const: . IDENTIFIER
  113          | . OPER_SIGNADD IDENTIFIER
  114          | . OPER_SIGNADD UINT
  115          | . UINT

    ARRAY         shift, and go to state 90
    IDENTIFIER    shift, and go to state 91
    UINT          shift, and go to state 92
    OPER_SIGNADD  shift, and go to state 93

    type        go to state 156
    struc_type  go to state 95
    ord_type    go to state 96
    ord_const   go to state 97


State 99

   32 C4: C4 COMMA IDENTIFIER .

    $default  reduce using rule 32 (C4)


State 100

   33 C5: C4 COLON type . SEMICOLON

    SEMICOLON  shift, and go to state 157


State 101

   34 C5: C5 C4 COLON . type SEMICOLON
   57 type: . ord_type
   58     | . IDENTIFIER
   59     | . struc_type
   60 struc_type: . ARRAY LSBRA ord_type_cycl RSBRA OF type
   61 ord_type: . ord_const DOTDOT ord_const
  112 ord_const: . IDENTIFIER
  113          | . OPER_SIGNADD IDENTIFIER
  114          | . OPER_SIGNADD UINT
  115          | . UINT

    ARRAY         shift, and go to state 90
    IDENTIFIER    shift, and go to state 91
    UINT          shift, and go to state 92
    OPER_SIGNADD  shift, and go to state 93

    type        go to state 158
    struc_type  go to state 95
    ord_type    go to state 96
    ord_const   go to state 97


State 102

   69 statement: D0 BEGIN state_cycle . END
   88 state_cycle: state_cycle . SEMICOLON statement

    END        shift, and go to state 159
    SEMICOLON  shift, and go to state 67


State 103

   68 statement: D0 GOTO UINT .

    $default  reduce using rule 68 (statement)


State 104

   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  111       | NOT . factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT         shift, and go to state 104
    IDENTIFIER  shift, and go to state 105
    UINT        shift, and go to state 106
    REAL        shift, and go to state 107
    STRING      shift, and go to state 108
    LPAR        shift, and go to state 109

    variable                  go to state 111
    variable_withoutID        go to state 112
    factor                    go to state 160
    unsigned_const_withoutID  go to state 118


State 105

   90 variable: IDENTIFIER .  [LSBRA]
  108 factor: IDENTIFIER .  [END, THEN, ELSE, DO, UNTIL, OR, SEMICOLON, COMMA, EQ, RPAR, RSBRA, OPER_REL, OPER_SIGNADD, OPER_MUL, FOR_DIRECTION]
  109       | IDENTIFIER . LPAR real_par RPAR

    LPAR  shift, and go to state 161

    LSBRA     reduce using rule 90 (variable)
    $default  reduce using rule 108 (factor)


State 106

  118 unsigned_const_withoutID: UINT .

    $default  reduce using rule 118 (unsigned_const_withoutID)


State 107

  116 unsigned_const_withoutID: REAL .

    $default  reduce using rule 116 (unsigned_const_withoutID)


State 108

  117 unsigned_const_withoutID: STRING .

    $default  reduce using rule 117 (unsigned_const_withoutID)


State 109

   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  110       | LPAR . expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    expression                go to state 162
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 110

   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   99 simp_expression: OPER_SIGNADD . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT         shift, and go to state 104
    IDENTIFIER  shift, and go to state 105
    UINT        shift, and go to state 106
    REAL        shift, and go to state 107
    STRING      shift, and go to state 108
    LPAR        shift, and go to state 109

    variable                  go to state 111
    variable_withoutID        go to state 112
    term_oper                 go to state 163
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 111

   89 variable: variable . LSBRA ord_expr_cylc RSBRA
   91 variable_withoutID: variable . LSBRA ord_expr_cylc RSBRA

    LSBRA  shift, and go to state 164


State 112

  107 factor: variable_withoutID .

    $default  reduce using rule 107 (factor)


State 113

   70 statement: D0 IF expression . THEN statement
   71          | D0 IF expression . THEN statement2 ELSE statement

    THEN  shift, and go to state 165


State 114

   96 expression: simp_expression .  [END, THEN, ELSE, DO, UNTIL, SEMICOLON, COMMA, RPAR, RSBRA, FOR_DIRECTION]
   97           | simp_expression . OPER_REL simp_expression
   98           | simp_expression . EQ simp_expression

    EQ        shift, and go to state 166
    OPER_REL  shift, and go to state 167

    $default  reduce using rule 96 (expression)


State 115

  100 simp_expression: term_oper .  [END, THEN, ELSE, DO, UNTIL, SEMICOLON, COMMA, EQ, RPAR, RSBRA, OPER_REL, FOR_DIRECTION]
  101 term_oper: term_oper . OPER_SIGNADD term
  102          | term_oper . OR term

    OR            shift, and go to state 168
    OPER_SIGNADD  shift, and go to state 169

    $default  reduce using rule 100 (simp_expression)


State 116

  103 term_oper: term .  [END, THEN, ELSE, DO, UNTIL, OR, SEMICOLON, COMMA, EQ, RPAR, RSBRA, OPER_REL, OPER_SIGNADD, FOR_DIRECTION]
  105 term: term . OPER_MUL factor

    OPER_MUL  shift, and go to state 170

    $default  reduce using rule 103 (term_oper)


State 117

  104 term: factor .

    $default  reduce using rule 104 (term)


State 118

  106 factor: unsigned_const_withoutID .

    $default  reduce using rule 106 (factor)


State 119

   72 statement: D0 WHILE expression . DO statement

    DO  shift, and go to state 171


State 120

   73 statement: D0 REPEAT state_cycle . UNTIL expression
   88 state_cycle: state_cycle . SEMICOLON statement

    UNTIL      shift, and go to state 172
    SEMICOLON  shift, and go to state 67


State 121

   74 statement: D0 FOR IDENTIFIER . ASSIGN expression FOR_DIRECTION expression DO statement

    ASSIGN  shift, and go to state 173


State 122

   67 statement: D0 IDENTIFIER LPAR . real_par RPAR
   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   94 real_par: . expression
   95         | . real_par COMMA expression
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    real_par                  go to state 174
    expression                go to state 175
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 123

   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   89         | variable LSBRA . ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   92 ord_expr_cylc: . expression
   93              | . ord_expr_cylc COMMA expression
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    ord_expr_cylc             go to state 176
    expression                go to state 177
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 124

   65 statement: D0 variable ASSIGN . expression
   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    expression                go to state 178
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 125

   88 state_cycle: state_cycle SEMICOLON statement .

    $default  reduce using rule 88 (state_cycle)


State 126

   51 form_par: VAR . id_cycl COLON IDENTIFIER
   55 id_cycl: . IDENTIFIER
   56        | . id_cycl COMMA IDENTIFIER

    IDENTIFIER  shift, and go to state 127

    id_cycl  go to state 179


State 127

   55 id_cycl: IDENTIFIER .

    $default  reduce using rule 55 (id_cycl)


State 128

   48 procedure_header: PROCEDURE IDENTIFIER LPAR form_par . RPAR
   53 form_par: form_par . SEMICOLON VAR id_cycl COLON IDENTIFIER
   54         | form_par . SEMICOLON id_cycl COLON IDENTIFIER

    SEMICOLON  shift, and go to state 180
    RPAR       shift, and go to state 181


State 129

   52 form_par: id_cycl . COLON IDENTIFIER
   56 id_cycl: id_cycl . COMMA IDENTIFIER

    COMMA  shift, and go to state 182
    COLON  shift, and go to state 183


State 130

   49 function_header: FUNCTION IDENTIFIER COLON IDENTIFIER .

    $default  reduce using rule 49 (function_header)


State 131

   50 function_header: FUNCTION IDENTIFIER LPAR form_par . RPAR COLON IDENTIFIER
   53 form_par: form_par . SEMICOLON VAR id_cycl COLON IDENTIFIER
   54         | form_par . SEMICOLON id_cycl COLON IDENTIFIER

    SEMICOLON  shift, and go to state 180
    RPAR       shift, and go to state 184


State 132

   37 C7: C7 procedure_header SEMICOLON block . SEMICOLON

    SEMICOLON  shift, and go to state 185


State 133

   38 C7: C7 function_header SEMICOLON block . SEMICOLON

    SEMICOLON  shift, and go to state 186


State 134

   13 end_block: . BEGIN state_cycle END
   22 C2: C2 . IDENTIFIER EQ UINT SEMICOLON
   23   | C2 . IDENTIFIER EQ REAL SEMICOLON
   24   | C2 . IDENTIFIER EQ STRING SEMICOLON
   25   | C2 . IDENTIFIER EQ IDENTIFIER SEMICOLON
   26   | C2 . IDENTIFIER EQ OPER_SIGNADD UINT SEMICOLON
   27   | C2 . IDENTIFIER EQ OPER_SIGNADD REAL SEMICOLON
   41 const_block2: CONST C2 . type_block2
   43 type_block2: . TYPE C3 var_block2
   44            | . var_block2
   45 var_block2: . VAR C5 end_block
   46           | . end_block

    TYPE        shift, and go to state 74
    VAR         shift, and go to state 75
    BEGIN       shift, and go to state 10
    IDENTIFIER  shift, and go to state 48

    end_block    go to state 77
    type_block2  go to state 187
    var_block2   go to state 81


State 135

   13 end_block: . BEGIN state_cycle END
   30 C3: C3 . IDENTIFIER EQ type SEMICOLON
   43 type_block2: TYPE C3 . var_block2
   45 var_block2: . VAR C5 end_block
   46           | . end_block

    VAR         shift, and go to state 75
    BEGIN       shift, and go to state 10
    IDENTIFIER  shift, and go to state 51

    end_block   go to state 77
    var_block2  go to state 188


State 136

   13 end_block: . BEGIN state_cycle END
   31 C4: . IDENTIFIER
   32   | . C4 COMMA IDENTIFIER
   34 C5: C5 . C4 COLON type SEMICOLON
   45 var_block2: VAR C5 . end_block

    BEGIN       shift, and go to state 10
    IDENTIFIER  shift, and go to state 29

    end_block  go to state 189
    C4         go to state 56


State 137

   39 block: start_block const_block2 .

    $default  reduce using rule 39 (block)


State 138

   35 C7: procedure_header SEMICOLON block SEMICOLON .

    $default  reduce using rule 35 (C7)


State 139

   36 C7: function_header SEMICOLON block SEMICOLON .

    $default  reduce using rule 36 (C7)


State 140

   19 C2: IDENTIFIER EQ IDENTIFIER SEMICOLON .

    $default  reduce using rule 19 (C2)


State 141

   16 C2: IDENTIFIER EQ UINT SEMICOLON .

    $default  reduce using rule 16 (C2)


State 142

   17 C2: IDENTIFIER EQ REAL SEMICOLON .

    $default  reduce using rule 17 (C2)


State 143

   18 C2: IDENTIFIER EQ STRING SEMICOLON .

    $default  reduce using rule 18 (C2)


State 144

   20 C2: IDENTIFIER EQ OPER_SIGNADD UINT . SEMICOLON

    SEMICOLON  shift, and go to state 190


State 145

   21 C2: IDENTIFIER EQ OPER_SIGNADD REAL . SEMICOLON

    SEMICOLON  shift, and go to state 191


State 146

   25 C2: C2 IDENTIFIER EQ IDENTIFIER . SEMICOLON

    SEMICOLON  shift, and go to state 192


State 147

   22 C2: C2 IDENTIFIER EQ UINT . SEMICOLON

    SEMICOLON  shift, and go to state 193


State 148

   23 C2: C2 IDENTIFIER EQ REAL . SEMICOLON

    SEMICOLON  shift, and go to state 194


State 149

   24 C2: C2 IDENTIFIER EQ STRING . SEMICOLON

    SEMICOLON  shift, and go to state 195


State 150

   26 C2: C2 IDENTIFIER EQ OPER_SIGNADD . UINT SEMICOLON
   27   | C2 IDENTIFIER EQ OPER_SIGNADD . REAL SEMICOLON

    UINT  shift, and go to state 196
    REAL  shift, and go to state 197


State 151

   60 struc_type: ARRAY LSBRA . ord_type_cycl RSBRA OF type
   61 ord_type: . ord_const DOTDOT ord_const
   62 ord_type_cycl: . ord_type
   63              | . ord_type_cycl COMMA ord_type
  112 ord_const: . IDENTIFIER
  113          | . OPER_SIGNADD IDENTIFIER
  114          | . OPER_SIGNADD UINT
  115          | . UINT

    IDENTIFIER    shift, and go to state 198
    UINT          shift, and go to state 92
    OPER_SIGNADD  shift, and go to state 93

    ord_type       go to state 199
    ord_type_cycl  go to state 200
    ord_const      go to state 97


State 152

  113 ord_const: OPER_SIGNADD IDENTIFIER .

    $default  reduce using rule 113 (ord_const)


State 153

  114 ord_const: OPER_SIGNADD UINT .

    $default  reduce using rule 114 (ord_const)


State 154

   29 C3: IDENTIFIER EQ type SEMICOLON .

    $default  reduce using rule 29 (C3)


State 155

   61 ord_type: ord_const DOTDOT . ord_const
  112 ord_const: . IDENTIFIER
  113          | . OPER_SIGNADD IDENTIFIER
  114          | . OPER_SIGNADD UINT
  115          | . UINT

    IDENTIFIER    shift, and go to state 198
    UINT          shift, and go to state 92
    OPER_SIGNADD  shift, and go to state 93

    ord_const  go to state 201


State 156

   30 C3: C3 IDENTIFIER EQ type . SEMICOLON

    SEMICOLON  shift, and go to state 202


State 157

   33 C5: C4 COLON type SEMICOLON .

    $default  reduce using rule 33 (C5)


State 158

   34 C5: C5 C4 COLON type . SEMICOLON

    SEMICOLON  shift, and go to state 203


State 159

   69 statement: D0 BEGIN state_cycle END .

    $default  reduce using rule 69 (statement)


State 160

  111 factor: NOT factor .

    $default  reduce using rule 111 (factor)


State 161

   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   94 real_par: . expression
   95         | . real_par COMMA expression
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  109       | IDENTIFIER LPAR . real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    real_par                  go to state 204
    expression                go to state 175
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 162

  110 factor: LPAR expression . RPAR

    RPAR  shift, and go to state 205


State 163

   99 simp_expression: OPER_SIGNADD term_oper .  [END, THEN, ELSE, DO, UNTIL, SEMICOLON, COMMA, EQ, RPAR, RSBRA, OPER_REL, FOR_DIRECTION]
  101 term_oper: term_oper . OPER_SIGNADD term
  102          | term_oper . OR term

    OR            shift, and go to state 168
    OPER_SIGNADD  shift, and go to state 169

    $default  reduce using rule 99 (simp_expression)


State 164

   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   89         | variable LSBRA . ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   91                   | variable LSBRA . ord_expr_cylc RSBRA
   92 ord_expr_cylc: . expression
   93              | . ord_expr_cylc COMMA expression
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    ord_expr_cylc             go to state 206
    expression                go to state 177
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 165

   64 statement: . %empty  [END, UNTIL, SEMICOLON]
   65          | . D0 variable ASSIGN expression
   66          | . D0 IDENTIFIER
   67          | . D0 IDENTIFIER LPAR real_par RPAR
   68          | . D0 GOTO UINT
   69          | . D0 BEGIN state_cycle END
   70          | . D0 IF expression THEN statement
   70          | D0 IF expression THEN . statement
   71          | . D0 IF expression THEN statement2 ELSE statement
   71          | D0 IF expression THEN . statement2 ELSE statement
   72          | . D0 WHILE expression DO statement
   73          | . D0 REPEAT state_cycle UNTIL expression
   74          | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement
   75 statement2: . %empty  [ELSE]
   76           | . D0 variable ASSIGN expression
   77           | . D0 IDENTIFIER
   78           | . D0 IDENTIFIER LPAR real_par RPAR
   79           | . D0 GOTO UINT
   80           | . D0 BEGIN state_cycle END
   81           | . D0 IF expression THEN statement2 ELSE statement2
   82           | . D0 WHILE expression DO statement2
   83           | . D0 REPEAT state_cycle UNTIL expression
   84           | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement2
   85 D0: . UINT COLON
   86   | . %empty  [BEGIN, GOTO, IF, WHILE, REPEAT, FOR, IDENTIFIER]

    UINT  shift, and go to state 32

    END        reduce using rule 64 (statement)
    ELSE       reduce using rule 75 (statement2)
    UNTIL      reduce using rule 64 (statement)
    SEMICOLON  reduce using rule 64 (statement)
    $default   reduce using rule 86 (D0)

    statement   go to state 207
    statement2  go to state 208
    D0          go to state 209


State 166

   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   98 expression: simp_expression EQ . simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    simp_expression           go to state 210
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 167

   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   97 expression: simp_expression OPER_REL . simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    simp_expression           go to state 211
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 168

   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
  102 term_oper: term_oper OR . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT         shift, and go to state 104
    IDENTIFIER  shift, and go to state 105
    UINT        shift, and go to state 106
    REAL        shift, and go to state 107
    STRING      shift, and go to state 108
    LPAR        shift, and go to state 109

    variable                  go to state 111
    variable_withoutID        go to state 112
    term                      go to state 212
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 169

   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
  101 term_oper: term_oper OPER_SIGNADD . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT         shift, and go to state 104
    IDENTIFIER  shift, and go to state 105
    UINT        shift, and go to state 106
    REAL        shift, and go to state 107
    STRING      shift, and go to state 108
    LPAR        shift, and go to state 109

    variable                  go to state 111
    variable_withoutID        go to state 112
    term                      go to state 213
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 170

   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
  105 term: term OPER_MUL . factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT         shift, and go to state 104
    IDENTIFIER  shift, and go to state 105
    UINT        shift, and go to state 106
    REAL        shift, and go to state 107
    STRING      shift, and go to state 108
    LPAR        shift, and go to state 109

    variable                  go to state 111
    variable_withoutID        go to state 112
    factor                    go to state 214
    unsigned_const_withoutID  go to state 118


State 171

   64 statement: . %empty  [END, UNTIL, SEMICOLON]
   65          | . D0 variable ASSIGN expression
   66          | . D0 IDENTIFIER
   67          | . D0 IDENTIFIER LPAR real_par RPAR
   68          | . D0 GOTO UINT
   69          | . D0 BEGIN state_cycle END
   70          | . D0 IF expression THEN statement
   71          | . D0 IF expression THEN statement2 ELSE statement
   72          | . D0 WHILE expression DO statement
   72          | D0 WHILE expression DO . statement
   73          | . D0 REPEAT state_cycle UNTIL expression
   74          | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement
   85 D0: . UINT COLON
   86   | . %empty  [BEGIN, GOTO, IF, WHILE, REPEAT, FOR, IDENTIFIER]

    UINT  shift, and go to state 32

    END        reduce using rule 64 (statement)
    UNTIL      reduce using rule 64 (statement)
    SEMICOLON  reduce using rule 64 (statement)
    $default   reduce using rule 86 (D0)

    statement  go to state 215
    D0         go to state 34


State 172

   73 statement: D0 REPEAT state_cycle UNTIL . expression
   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    expression                go to state 216
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 173

   74 statement: D0 FOR IDENTIFIER ASSIGN . expression FOR_DIRECTION expression DO statement
   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    expression                go to state 217
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 174

   67 statement: D0 IDENTIFIER LPAR real_par . RPAR
   95 real_par: real_par . COMMA expression

    COMMA  shift, and go to state 218
    RPAR   shift, and go to state 219


State 175

   94 real_par: expression .

    $default  reduce using rule 94 (real_par)


State 176

   89 variable: variable LSBRA ord_expr_cylc . RSBRA
   93 ord_expr_cylc: ord_expr_cylc . COMMA expression

    COMMA  shift, and go to state 220
    RSBRA  shift, and go to state 221


State 177

   92 ord_expr_cylc: expression .

    $default  reduce using rule 92 (ord_expr_cylc)


State 178

   65 statement: D0 variable ASSIGN expression .

    $default  reduce using rule 65 (statement)


State 179

   51 form_par: VAR id_cycl . COLON IDENTIFIER
   56 id_cycl: id_cycl . COMMA IDENTIFIER

    COMMA  shift, and go to state 182
    COLON  shift, and go to state 222


State 180

   53 form_par: form_par SEMICOLON . VAR id_cycl COLON IDENTIFIER
   54         | form_par SEMICOLON . id_cycl COLON IDENTIFIER
   55 id_cycl: . IDENTIFIER
   56        | . id_cycl COMMA IDENTIFIER

    VAR         shift, and go to state 223
    IDENTIFIER  shift, and go to state 127

    id_cycl  go to state 224


State 181

   48 procedure_header: PROCEDURE IDENTIFIER LPAR form_par RPAR .

    $default  reduce using rule 48 (procedure_header)


State 182

   56 id_cycl: id_cycl COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 225


State 183

   52 form_par: id_cycl COLON . IDENTIFIER

    IDENTIFIER  shift, and go to state 226


State 184

   50 function_header: FUNCTION IDENTIFIER LPAR form_par RPAR . COLON IDENTIFIER

    COLON  shift, and go to state 227


State 185

   37 C7: C7 procedure_header SEMICOLON block SEMICOLON .

    $default  reduce using rule 37 (C7)


State 186

   38 C7: C7 function_header SEMICOLON block SEMICOLON .

    $default  reduce using rule 38 (C7)


State 187

   41 const_block2: CONST C2 type_block2 .

    $default  reduce using rule 41 (const_block2)


State 188

   43 type_block2: TYPE C3 var_block2 .

    $default  reduce using rule 43 (type_block2)


State 189

   45 var_block2: VAR C5 end_block .

    $default  reduce using rule 45 (var_block2)


State 190

   20 C2: IDENTIFIER EQ OPER_SIGNADD UINT SEMICOLON .

    $default  reduce using rule 20 (C2)


State 191

   21 C2: IDENTIFIER EQ OPER_SIGNADD REAL SEMICOLON .

    $default  reduce using rule 21 (C2)


State 192

   25 C2: C2 IDENTIFIER EQ IDENTIFIER SEMICOLON .

    $default  reduce using rule 25 (C2)


State 193

   22 C2: C2 IDENTIFIER EQ UINT SEMICOLON .

    $default  reduce using rule 22 (C2)


State 194

   23 C2: C2 IDENTIFIER EQ REAL SEMICOLON .

    $default  reduce using rule 23 (C2)


State 195

   24 C2: C2 IDENTIFIER EQ STRING SEMICOLON .

    $default  reduce using rule 24 (C2)


State 196

   26 C2: C2 IDENTIFIER EQ OPER_SIGNADD UINT . SEMICOLON

    SEMICOLON  shift, and go to state 228


State 197

   27 C2: C2 IDENTIFIER EQ OPER_SIGNADD REAL . SEMICOLON

    SEMICOLON  shift, and go to state 229


State 198

  112 ord_const: IDENTIFIER .

    $default  reduce using rule 112 (ord_const)


State 199

   62 ord_type_cycl: ord_type .

    $default  reduce using rule 62 (ord_type_cycl)


State 200

   60 struc_type: ARRAY LSBRA ord_type_cycl . RSBRA OF type
   63 ord_type_cycl: ord_type_cycl . COMMA ord_type

    COMMA  shift, and go to state 230
    RSBRA  shift, and go to state 231


State 201

   61 ord_type: ord_const DOTDOT ord_const .

    $default  reduce using rule 61 (ord_type)


State 202

   30 C3: C3 IDENTIFIER EQ type SEMICOLON .

    $default  reduce using rule 30 (C3)


State 203

   34 C5: C5 C4 COLON type SEMICOLON .

    $default  reduce using rule 34 (C5)


State 204

   95 real_par: real_par . COMMA expression
  109 factor: IDENTIFIER LPAR real_par . RPAR

    COMMA  shift, and go to state 218
    RPAR   shift, and go to state 232


State 205

  110 factor: LPAR expression RPAR .

    $default  reduce using rule 110 (factor)


State 206

   89 variable: variable LSBRA ord_expr_cylc . RSBRA
   91 variable_withoutID: variable LSBRA ord_expr_cylc . RSBRA
   93 ord_expr_cylc: ord_expr_cylc . COMMA expression

    COMMA  shift, and go to state 220
    RSBRA  shift, and go to state 233


State 207

   70 statement: D0 IF expression THEN statement .

    $default  reduce using rule 70 (statement)


State 208

   71 statement: D0 IF expression THEN statement2 . ELSE statement

    ELSE  shift, and go to state 234


State 209

   65 statement: D0 . variable ASSIGN expression
   66          | D0 . IDENTIFIER
   67          | D0 . IDENTIFIER LPAR real_par RPAR
   68          | D0 . GOTO UINT
   69          | D0 . BEGIN state_cycle END
   70          | D0 . IF expression THEN statement
   71          | D0 . IF expression THEN statement2 ELSE statement
   72          | D0 . WHILE expression DO statement
   73          | D0 . REPEAT state_cycle UNTIL expression
   74          | D0 . FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement
   76 statement2: D0 . variable ASSIGN expression
   77           | D0 . IDENTIFIER
   78           | D0 . IDENTIFIER LPAR real_par RPAR
   79           | D0 . GOTO UINT
   80           | D0 . BEGIN state_cycle END
   81           | D0 . IF expression THEN statement2 ELSE statement2
   82           | D0 . WHILE expression DO statement2
   83           | D0 . REPEAT state_cycle UNTIL expression
   84           | D0 . FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement2
   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER

    BEGIN       shift, and go to state 235
    GOTO        shift, and go to state 236
    IF          shift, and go to state 237
    WHILE       shift, and go to state 238
    REPEAT      shift, and go to state 239
    FOR         shift, and go to state 240
    IDENTIFIER  shift, and go to state 241

    variable  go to state 242


State 210

   98 expression: simp_expression EQ simp_expression .

    $default  reduce using rule 98 (expression)


State 211

   97 expression: simp_expression OPER_REL simp_expression .

    $default  reduce using rule 97 (expression)


State 212

  102 term_oper: term_oper OR term .  [END, THEN, ELSE, DO, UNTIL, OR, SEMICOLON, COMMA, EQ, RPAR, RSBRA, OPER_REL, OPER_SIGNADD, FOR_DIRECTION]
  105 term: term . OPER_MUL factor

    OPER_MUL  shift, and go to state 170

    $default  reduce using rule 102 (term_oper)


State 213

  101 term_oper: term_oper OPER_SIGNADD term .  [END, THEN, ELSE, DO, UNTIL, OR, SEMICOLON, COMMA, EQ, RPAR, RSBRA, OPER_REL, OPER_SIGNADD, FOR_DIRECTION]
  105 term: term . OPER_MUL factor

    OPER_MUL  shift, and go to state 170

    $default  reduce using rule 101 (term_oper)


State 214

  105 term: term OPER_MUL factor .

    $default  reduce using rule 105 (term)


State 215

   72 statement: D0 WHILE expression DO statement .

    $default  reduce using rule 72 (statement)


State 216

   73 statement: D0 REPEAT state_cycle UNTIL expression .

    $default  reduce using rule 73 (statement)


State 217

   74 statement: D0 FOR IDENTIFIER ASSIGN expression . FOR_DIRECTION expression DO statement

    FOR_DIRECTION  shift, and go to state 243


State 218

   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   95 real_par: real_par COMMA . expression
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    expression                go to state 244
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 219

   67 statement: D0 IDENTIFIER LPAR real_par RPAR .

    $default  reduce using rule 67 (statement)


State 220

   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   93 ord_expr_cylc: ord_expr_cylc COMMA . expression
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    expression                go to state 245
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 221

   89 variable: variable LSBRA ord_expr_cylc RSBRA .

    $default  reduce using rule 89 (variable)


State 222

   51 form_par: VAR id_cycl COLON . IDENTIFIER

    IDENTIFIER  shift, and go to state 246


State 223

   53 form_par: form_par SEMICOLON VAR . id_cycl COLON IDENTIFIER
   55 id_cycl: . IDENTIFIER
   56        | . id_cycl COMMA IDENTIFIER

    IDENTIFIER  shift, and go to state 127

    id_cycl  go to state 247


State 224

   54 form_par: form_par SEMICOLON id_cycl . COLON IDENTIFIER
   56 id_cycl: id_cycl . COMMA IDENTIFIER

    COMMA  shift, and go to state 182
    COLON  shift, and go to state 248


State 225

   56 id_cycl: id_cycl COMMA IDENTIFIER .

    $default  reduce using rule 56 (id_cycl)


State 226

   52 form_par: id_cycl COLON IDENTIFIER .

    $default  reduce using rule 52 (form_par)


State 227

   50 function_header: FUNCTION IDENTIFIER LPAR form_par RPAR COLON . IDENTIFIER

    IDENTIFIER  shift, and go to state 249


State 228

   26 C2: C2 IDENTIFIER EQ OPER_SIGNADD UINT SEMICOLON .

    $default  reduce using rule 26 (C2)


State 229

   27 C2: C2 IDENTIFIER EQ OPER_SIGNADD REAL SEMICOLON .

    $default  reduce using rule 27 (C2)


State 230

   61 ord_type: . ord_const DOTDOT ord_const
   63 ord_type_cycl: ord_type_cycl COMMA . ord_type
  112 ord_const: . IDENTIFIER
  113          | . OPER_SIGNADD IDENTIFIER
  114          | . OPER_SIGNADD UINT
  115          | . UINT

    IDENTIFIER    shift, and go to state 198
    UINT          shift, and go to state 92
    OPER_SIGNADD  shift, and go to state 93

    ord_type   go to state 250
    ord_const  go to state 97


State 231

   60 struc_type: ARRAY LSBRA ord_type_cycl RSBRA . OF type

    OF  shift, and go to state 251


State 232

  109 factor: IDENTIFIER LPAR real_par RPAR .

    $default  reduce using rule 109 (factor)


State 233

   89 variable: variable LSBRA ord_expr_cylc RSBRA .  [LSBRA]
   91 variable_withoutID: variable LSBRA ord_expr_cylc RSBRA .  [END, THEN, ELSE, DO, UNTIL, OR, SEMICOLON, COMMA, EQ, RPAR, RSBRA, OPER_REL, OPER_SIGNADD, OPER_MUL, FOR_DIRECTION]

    LSBRA     reduce using rule 89 (variable)
    $default  reduce using rule 91 (variable_withoutID)


State 234

   64 statement: . %empty  [END, UNTIL, SEMICOLON]
   65          | . D0 variable ASSIGN expression
   66          | . D0 IDENTIFIER
   67          | . D0 IDENTIFIER LPAR real_par RPAR
   68          | . D0 GOTO UINT
   69          | . D0 BEGIN state_cycle END
   70          | . D0 IF expression THEN statement
   71          | . D0 IF expression THEN statement2 ELSE statement
   71          | D0 IF expression THEN statement2 ELSE . statement
   72          | . D0 WHILE expression DO statement
   73          | . D0 REPEAT state_cycle UNTIL expression
   74          | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement
   85 D0: . UINT COLON
   86   | . %empty  [BEGIN, GOTO, IF, WHILE, REPEAT, FOR, IDENTIFIER]

    UINT  shift, and go to state 32

    END        reduce using rule 64 (statement)
    UNTIL      reduce using rule 64 (statement)
    SEMICOLON  reduce using rule 64 (statement)
    $default   reduce using rule 86 (D0)

    statement  go to state 252
    D0         go to state 34


State 235

   64 statement: . %empty  [END, SEMICOLON]
   65          | . D0 variable ASSIGN expression
   66          | . D0 IDENTIFIER
   67          | . D0 IDENTIFIER LPAR real_par RPAR
   68          | . D0 GOTO UINT
   69          | . D0 BEGIN state_cycle END
   69          | D0 BEGIN . state_cycle END
   70          | . D0 IF expression THEN statement
   71          | . D0 IF expression THEN statement2 ELSE statement
   72          | . D0 WHILE expression DO statement
   73          | . D0 REPEAT state_cycle UNTIL expression
   74          | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement
   80 statement2: D0 BEGIN . state_cycle END
   85 D0: . UINT COLON
   86   | . %empty  [BEGIN, GOTO, IF, WHILE, REPEAT, FOR, IDENTIFIER]
   87 state_cycle: . statement
   88            | . state_cycle SEMICOLON statement

    UINT  shift, and go to state 32

    END        reduce using rule 64 (statement)
    SEMICOLON  reduce using rule 64 (statement)
    $default   reduce using rule 86 (D0)

    statement    go to state 33
    D0           go to state 34
    state_cycle  go to state 253


State 236

   68 statement: D0 GOTO . UINT
   79 statement2: D0 GOTO . UINT

    UINT  shift, and go to state 254


State 237

   70 statement: D0 IF . expression THEN statement
   71          | D0 IF . expression THEN statement2 ELSE statement
   81 statement2: D0 IF . expression THEN statement2 ELSE statement2
   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    expression                go to state 255
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 238

   72 statement: D0 WHILE . expression DO statement
   82 statement2: D0 WHILE . expression DO statement2
   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    expression                go to state 256
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 239

   64 statement: . %empty  [UNTIL, SEMICOLON]
   65          | . D0 variable ASSIGN expression
   66          | . D0 IDENTIFIER
   67          | . D0 IDENTIFIER LPAR real_par RPAR
   68          | . D0 GOTO UINT
   69          | . D0 BEGIN state_cycle END
   70          | . D0 IF expression THEN statement
   71          | . D0 IF expression THEN statement2 ELSE statement
   72          | . D0 WHILE expression DO statement
   73          | . D0 REPEAT state_cycle UNTIL expression
   73          | D0 REPEAT . state_cycle UNTIL expression
   74          | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement
   83 statement2: D0 REPEAT . state_cycle UNTIL expression
   85 D0: . UINT COLON
   86   | . %empty  [BEGIN, GOTO, IF, WHILE, REPEAT, FOR, IDENTIFIER]
   87 state_cycle: . statement
   88            | . state_cycle SEMICOLON statement

    UINT  shift, and go to state 32

    UNTIL      reduce using rule 64 (statement)
    SEMICOLON  reduce using rule 64 (statement)
    $default   reduce using rule 86 (D0)

    statement    go to state 33
    D0           go to state 34
    state_cycle  go to state 257


State 240

   74 statement: D0 FOR . IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement
   84 statement2: D0 FOR . IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement2

    IDENTIFIER  shift, and go to state 258


State 241

   66 statement: D0 IDENTIFIER .  [END, UNTIL, SEMICOLON]
   67          | D0 IDENTIFIER . LPAR real_par RPAR
   77 statement2: D0 IDENTIFIER .  [ELSE]
   78           | D0 IDENTIFIER . LPAR real_par RPAR
   90 variable: IDENTIFIER .  [LSBRA, ASSIGN]

    LPAR  shift, and go to state 259

    ELSE      reduce using rule 77 (statement2)
    LSBRA     reduce using rule 90 (variable)
    ASSIGN    reduce using rule 90 (variable)
    $default  reduce using rule 66 (statement)


State 242

   65 statement: D0 variable . ASSIGN expression
   76 statement2: D0 variable . ASSIGN expression
   89 variable: variable . LSBRA ord_expr_cylc RSBRA

    LSBRA   shift, and go to state 123
    ASSIGN  shift, and go to state 260


State 243

   74 statement: D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION . expression DO statement
   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    expression                go to state 261
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 244

   95 real_par: real_par COMMA expression .

    $default  reduce using rule 95 (real_par)


State 245

   93 ord_expr_cylc: ord_expr_cylc COMMA expression .

    $default  reduce using rule 93 (ord_expr_cylc)


State 246

   51 form_par: VAR id_cycl COLON IDENTIFIER .

    $default  reduce using rule 51 (form_par)


State 247

   53 form_par: form_par SEMICOLON VAR id_cycl . COLON IDENTIFIER
   56 id_cycl: id_cycl . COMMA IDENTIFIER

    COMMA  shift, and go to state 182
    COLON  shift, and go to state 262


State 248

   54 form_par: form_par SEMICOLON id_cycl COLON . IDENTIFIER

    IDENTIFIER  shift, and go to state 263


State 249

   50 function_header: FUNCTION IDENTIFIER LPAR form_par RPAR COLON IDENTIFIER .

    $default  reduce using rule 50 (function_header)


State 250

   63 ord_type_cycl: ord_type_cycl COMMA ord_type .

    $default  reduce using rule 63 (ord_type_cycl)


State 251

   57 type: . ord_type
   58     | . IDENTIFIER
   59     | . struc_type
   60 struc_type: . ARRAY LSBRA ord_type_cycl RSBRA OF type
   60           | ARRAY LSBRA ord_type_cycl RSBRA OF . type
   61 ord_type: . ord_const DOTDOT ord_const
  112 ord_const: . IDENTIFIER
  113          | . OPER_SIGNADD IDENTIFIER
  114          | . OPER_SIGNADD UINT
  115          | . UINT

    ARRAY         shift, and go to state 90
    IDENTIFIER    shift, and go to state 91
    UINT          shift, and go to state 92
    OPER_SIGNADD  shift, and go to state 93

    type        go to state 264
    struc_type  go to state 95
    ord_type    go to state 96
    ord_const   go to state 97


State 252

   71 statement: D0 IF expression THEN statement2 ELSE statement .

    $default  reduce using rule 71 (statement)


State 253

   69 statement: D0 BEGIN state_cycle . END
   80 statement2: D0 BEGIN state_cycle . END
   88 state_cycle: state_cycle . SEMICOLON statement

    END        shift, and go to state 265
    SEMICOLON  shift, and go to state 67


State 254

   68 statement: D0 GOTO UINT .  [END, UNTIL, SEMICOLON]
   79 statement2: D0 GOTO UINT .  [ELSE]

    ELSE      reduce using rule 79 (statement2)
    $default  reduce using rule 68 (statement)


State 255

   70 statement: D0 IF expression . THEN statement
   71          | D0 IF expression . THEN statement2 ELSE statement
   81 statement2: D0 IF expression . THEN statement2 ELSE statement2

    THEN  shift, and go to state 266


State 256

   72 statement: D0 WHILE expression . DO statement
   82 statement2: D0 WHILE expression . DO statement2

    DO  shift, and go to state 267


State 257

   73 statement: D0 REPEAT state_cycle . UNTIL expression
   83 statement2: D0 REPEAT state_cycle . UNTIL expression
   88 state_cycle: state_cycle . SEMICOLON statement

    UNTIL      shift, and go to state 268
    SEMICOLON  shift, and go to state 67


State 258

   74 statement: D0 FOR IDENTIFIER . ASSIGN expression FOR_DIRECTION expression DO statement
   84 statement2: D0 FOR IDENTIFIER . ASSIGN expression FOR_DIRECTION expression DO statement2

    ASSIGN  shift, and go to state 269


State 259

   67 statement: D0 IDENTIFIER LPAR . real_par RPAR
   78 statement2: D0 IDENTIFIER LPAR . real_par RPAR
   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   94 real_par: . expression
   95         | . real_par COMMA expression
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    real_par                  go to state 270
    expression                go to state 175
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 260

   65 statement: D0 variable ASSIGN . expression
   76 statement2: D0 variable ASSIGN . expression
   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    expression                go to state 271
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 261

   74 statement: D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression . DO statement

    DO  shift, and go to state 272


State 262

   53 form_par: form_par SEMICOLON VAR id_cycl COLON . IDENTIFIER

    IDENTIFIER  shift, and go to state 273


State 263

   54 form_par: form_par SEMICOLON id_cycl COLON IDENTIFIER .

    $default  reduce using rule 54 (form_par)


State 264

   60 struc_type: ARRAY LSBRA ord_type_cycl RSBRA OF type .

    $default  reduce using rule 60 (struc_type)


State 265

   69 statement: D0 BEGIN state_cycle END .  [END, UNTIL, SEMICOLON]
   80 statement2: D0 BEGIN state_cycle END .  [ELSE]

    ELSE      reduce using rule 80 (statement2)
    $default  reduce using rule 69 (statement)


State 266

   64 statement: . %empty  [END, UNTIL, SEMICOLON]
   65          | . D0 variable ASSIGN expression
   66          | . D0 IDENTIFIER
   67          | . D0 IDENTIFIER LPAR real_par RPAR
   68          | . D0 GOTO UINT
   69          | . D0 BEGIN state_cycle END
   70          | . D0 IF expression THEN statement
   70          | D0 IF expression THEN . statement
   71          | . D0 IF expression THEN statement2 ELSE statement
   71          | D0 IF expression THEN . statement2 ELSE statement
   72          | . D0 WHILE expression DO statement
   73          | . D0 REPEAT state_cycle UNTIL expression
   74          | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement
   75 statement2: . %empty  [ELSE]
   76           | . D0 variable ASSIGN expression
   77           | . D0 IDENTIFIER
   78           | . D0 IDENTIFIER LPAR real_par RPAR
   79           | . D0 GOTO UINT
   80           | . D0 BEGIN state_cycle END
   81           | . D0 IF expression THEN statement2 ELSE statement2
   81           | D0 IF expression THEN . statement2 ELSE statement2
   82           | . D0 WHILE expression DO statement2
   83           | . D0 REPEAT state_cycle UNTIL expression
   84           | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement2
   85 D0: . UINT COLON
   86   | . %empty  [BEGIN, GOTO, IF, WHILE, REPEAT, FOR, IDENTIFIER]

    UINT  shift, and go to state 32

    END        reduce using rule 64 (statement)
    ELSE       reduce using rule 75 (statement2)
    UNTIL      reduce using rule 64 (statement)
    SEMICOLON  reduce using rule 64 (statement)
    $default   reduce using rule 86 (D0)

    statement   go to state 207
    statement2  go to state 274
    D0          go to state 209


State 267

   64 statement: . %empty  [END, UNTIL, SEMICOLON]
   65          | . D0 variable ASSIGN expression
   66          | . D0 IDENTIFIER
   67          | . D0 IDENTIFIER LPAR real_par RPAR
   68          | . D0 GOTO UINT
   69          | . D0 BEGIN state_cycle END
   70          | . D0 IF expression THEN statement
   71          | . D0 IF expression THEN statement2 ELSE statement
   72          | . D0 WHILE expression DO statement
   72          | D0 WHILE expression DO . statement
   73          | . D0 REPEAT state_cycle UNTIL expression
   74          | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement
   75 statement2: . %empty  [ELSE]
   76           | . D0 variable ASSIGN expression
   77           | . D0 IDENTIFIER
   78           | . D0 IDENTIFIER LPAR real_par RPAR
   79           | . D0 GOTO UINT
   80           | . D0 BEGIN state_cycle END
   81           | . D0 IF expression THEN statement2 ELSE statement2
   82           | . D0 WHILE expression DO statement2
   82           | D0 WHILE expression DO . statement2
   83           | . D0 REPEAT state_cycle UNTIL expression
   84           | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement2
   85 D0: . UINT COLON
   86   | . %empty  [BEGIN, GOTO, IF, WHILE, REPEAT, FOR, IDENTIFIER]

    UINT  shift, and go to state 32

    END        reduce using rule 64 (statement)
    ELSE       reduce using rule 75 (statement2)
    UNTIL      reduce using rule 64 (statement)
    SEMICOLON  reduce using rule 64 (statement)
    $default   reduce using rule 86 (D0)

    statement   go to state 215
    statement2  go to state 275
    D0          go to state 209


State 268

   73 statement: D0 REPEAT state_cycle UNTIL . expression
   83 statement2: D0 REPEAT state_cycle UNTIL . expression
   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    expression                go to state 276
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 269

   74 statement: D0 FOR IDENTIFIER ASSIGN . expression FOR_DIRECTION expression DO statement
   84 statement2: D0 FOR IDENTIFIER ASSIGN . expression FOR_DIRECTION expression DO statement2
   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    expression                go to state 277
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 270

   67 statement: D0 IDENTIFIER LPAR real_par . RPAR
   78 statement2: D0 IDENTIFIER LPAR real_par . RPAR
   95 real_par: real_par . COMMA expression

    COMMA  shift, and go to state 218
    RPAR   shift, and go to state 278


State 271

   65 statement: D0 variable ASSIGN expression .  [END, UNTIL, SEMICOLON]
   76 statement2: D0 variable ASSIGN expression .  [ELSE]

    ELSE      reduce using rule 76 (statement2)
    $default  reduce using rule 65 (statement)


State 272

   64 statement: . %empty  [END, UNTIL, SEMICOLON]
   65          | . D0 variable ASSIGN expression
   66          | . D0 IDENTIFIER
   67          | . D0 IDENTIFIER LPAR real_par RPAR
   68          | . D0 GOTO UINT
   69          | . D0 BEGIN state_cycle END
   70          | . D0 IF expression THEN statement
   71          | . D0 IF expression THEN statement2 ELSE statement
   72          | . D0 WHILE expression DO statement
   73          | . D0 REPEAT state_cycle UNTIL expression
   74          | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement
   74          | D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO . statement
   85 D0: . UINT COLON
   86   | . %empty  [BEGIN, GOTO, IF, WHILE, REPEAT, FOR, IDENTIFIER]

    UINT  shift, and go to state 32

    END        reduce using rule 64 (statement)
    UNTIL      reduce using rule 64 (statement)
    SEMICOLON  reduce using rule 64 (statement)
    $default   reduce using rule 86 (D0)

    statement  go to state 279
    D0         go to state 34


State 273

   53 form_par: form_par SEMICOLON VAR id_cycl COLON IDENTIFIER .

    $default  reduce using rule 53 (form_par)


State 274

   71 statement: D0 IF expression THEN statement2 . ELSE statement
   81 statement2: D0 IF expression THEN statement2 . ELSE statement2

    ELSE  shift, and go to state 280


State 275

   82 statement2: D0 WHILE expression DO statement2 .

    $default  reduce using rule 82 (statement2)


State 276

   73 statement: D0 REPEAT state_cycle UNTIL expression .  [END, UNTIL, SEMICOLON]
   83 statement2: D0 REPEAT state_cycle UNTIL expression .  [ELSE]

    ELSE      reduce using rule 83 (statement2)
    $default  reduce using rule 73 (statement)


State 277

   74 statement: D0 FOR IDENTIFIER ASSIGN expression . FOR_DIRECTION expression DO statement
   84 statement2: D0 FOR IDENTIFIER ASSIGN expression . FOR_DIRECTION expression DO statement2

    FOR_DIRECTION  shift, and go to state 281


State 278

   67 statement: D0 IDENTIFIER LPAR real_par RPAR .  [END, UNTIL, SEMICOLON]
   78 statement2: D0 IDENTIFIER LPAR real_par RPAR .  [ELSE]

    ELSE      reduce using rule 78 (statement2)
    $default  reduce using rule 67 (statement)


State 279

   74 statement: D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement .

    $default  reduce using rule 74 (statement)


State 280

   64 statement: . %empty  [END, UNTIL, SEMICOLON]
   65          | . D0 variable ASSIGN expression
   66          | . D0 IDENTIFIER
   67          | . D0 IDENTIFIER LPAR real_par RPAR
   68          | . D0 GOTO UINT
   69          | . D0 BEGIN state_cycle END
   70          | . D0 IF expression THEN statement
   71          | . D0 IF expression THEN statement2 ELSE statement
   71          | D0 IF expression THEN statement2 ELSE . statement
   72          | . D0 WHILE expression DO statement
   73          | . D0 REPEAT state_cycle UNTIL expression
   74          | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement
   75 statement2: . %empty  [ELSE]
   76           | . D0 variable ASSIGN expression
   77           | . D0 IDENTIFIER
   78           | . D0 IDENTIFIER LPAR real_par RPAR
   79           | . D0 GOTO UINT
   80           | . D0 BEGIN state_cycle END
   81           | . D0 IF expression THEN statement2 ELSE statement2
   81           | D0 IF expression THEN statement2 ELSE . statement2
   82           | . D0 WHILE expression DO statement2
   83           | . D0 REPEAT state_cycle UNTIL expression
   84           | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement2
   85 D0: . UINT COLON
   86   | . %empty  [BEGIN, GOTO, IF, WHILE, REPEAT, FOR, IDENTIFIER]

    UINT  shift, and go to state 32

    END        reduce using rule 64 (statement)
    ELSE       reduce using rule 75 (statement2)
    UNTIL      reduce using rule 64 (statement)
    SEMICOLON  reduce using rule 64 (statement)
    $default   reduce using rule 86 (D0)

    statement   go to state 252
    statement2  go to state 282
    D0          go to state 209


State 281

   74 statement: D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION . expression DO statement
   84 statement2: D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION . expression DO statement2
   89 variable: . variable LSBRA ord_expr_cylc RSBRA
   90         | . IDENTIFIER
   91 variable_withoutID: . variable LSBRA ord_expr_cylc RSBRA
   96 expression: . simp_expression
   97           | . simp_expression OPER_REL simp_expression
   98           | . simp_expression EQ simp_expression
   99 simp_expression: . OPER_SIGNADD term_oper
  100                | . term_oper
  101 term_oper: . term_oper OPER_SIGNADD term
  102          | . term_oper OR term
  103          | . term
  104 term: . factor
  105     | . term OPER_MUL factor
  106 factor: . unsigned_const_withoutID
  107       | . variable_withoutID
  108       | . IDENTIFIER
  109       | . IDENTIFIER LPAR real_par RPAR
  110       | . LPAR expression RPAR
  111       | . NOT factor
  116 unsigned_const_withoutID: . REAL
  117                         | . STRING
  118                         | . UINT

    NOT           shift, and go to state 104
    IDENTIFIER    shift, and go to state 105
    UINT          shift, and go to state 106
    REAL          shift, and go to state 107
    STRING        shift, and go to state 108
    LPAR          shift, and go to state 109
    OPER_SIGNADD  shift, and go to state 110

    variable                  go to state 111
    variable_withoutID        go to state 112
    expression                go to state 283
    simp_expression           go to state 114
    term_oper                 go to state 115
    term                      go to state 116
    factor                    go to state 117
    unsigned_const_withoutID  go to state 118


State 282

   81 statement2: D0 IF expression THEN statement2 ELSE statement2 .

    $default  reduce using rule 81 (statement2)


State 283

   74 statement: D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression . DO statement
   84 statement2: D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression . DO statement2

    DO  shift, and go to state 284


State 284

   64 statement: . %empty  [END, UNTIL, SEMICOLON]
   65          | . D0 variable ASSIGN expression
   66          | . D0 IDENTIFIER
   67          | . D0 IDENTIFIER LPAR real_par RPAR
   68          | . D0 GOTO UINT
   69          | . D0 BEGIN state_cycle END
   70          | . D0 IF expression THEN statement
   71          | . D0 IF expression THEN statement2 ELSE statement
   72          | . D0 WHILE expression DO statement
   73          | . D0 REPEAT state_cycle UNTIL expression
   74          | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement
   74          | D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO . statement
   75 statement2: . %empty  [ELSE]
   76           | . D0 variable ASSIGN expression
   77           | . D0 IDENTIFIER
   78           | . D0 IDENTIFIER LPAR real_par RPAR
   79           | . D0 GOTO UINT
   80           | . D0 BEGIN state_cycle END
   81           | . D0 IF expression THEN statement2 ELSE statement2
   82           | . D0 WHILE expression DO statement2
   83           | . D0 REPEAT state_cycle UNTIL expression
   84           | . D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement2
   84           | D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO . statement2
   85 D0: . UINT COLON
   86   | . %empty  [BEGIN, GOTO, IF, WHILE, REPEAT, FOR, IDENTIFIER]

    UINT  shift, and go to state 32

    END        reduce using rule 64 (statement)
    ELSE       reduce using rule 75 (statement2)
    UNTIL      reduce using rule 64 (statement)
    SEMICOLON  reduce using rule 64 (statement)
    $default   reduce using rule 86 (D0)

    statement   go to state 279
    statement2  go to state 285
    D0          go to state 209


State 285

   84 statement2: D0 FOR IDENTIFIER ASSIGN expression FOR_DIRECTION expression DO statement2 .

    $default  reduce using rule 84 (statement2)
